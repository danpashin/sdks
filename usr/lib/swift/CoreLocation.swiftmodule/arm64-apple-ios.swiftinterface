// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.123.203 clang-1500.0.37.1)
// swift-module-flags: -target arm64-apple-ios17.0 -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftCoreLocation -swift-version 5 -enforce-exclusivity=checked -O -library-level api -module-name CoreLocation
// swift-module-flags-ignorable: -enable-bare-slash-regex -user-module-version 36
@_exported import CoreLocation
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
@available(iOS 13.0, macOS 10.15, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(xrOS, unavailable)
extension CoreLocation.CLBeaconIdentityConstraint {
  public var major: Swift.UInt16? {
    get
  }
  public var minor: Swift.UInt16? {
    get
  }
}
@available(macOS 14.0, iOS 17.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public protocol CLCondition : Swift.Decodable, Swift.Encodable, Swift.Sendable {
}
#if compiler(>=5.3) && $Actors
@available(macOS 14.0, iOS 17.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public actor CLMonitor {
  public var identifiers: [Swift.String] {
    get
  }
  final public let events: CoreLocation.CLMonitor.Events
  public struct Record : Swift.Sendable {
    public let lastEvent: CoreLocation.CLMonitor.Event
    public let condition: any CoreLocation.CLCondition
  }
  public struct Event : Swift.Sendable {
    public typealias State = CoreLocation.__CLMonitoringState
    public let refinement: (any CoreLocation.CLCondition)?
    public let identifier: Swift.String
    public let state: CoreLocation.CLMonitor.Event.State
    public let date: Foundation.Date
  }
  #if compiler(>=5.3) && $RethrowsProtocol
  public struct Events : _Concurrency.AsyncSequence, Swift.Sendable {
    public typealias Element = CoreLocation.CLMonitor.Event
    public struct Iterator : _Concurrency.AsyncIteratorProtocol {
      #if compiler(>=5.3) && $AsyncAwait
      public mutating func next() async throws -> CoreLocation.CLMonitor.Events.Element?
      #endif
      public typealias Element = CoreLocation.CLMonitor.Events.Element
    }
    public func makeAsyncIterator() -> CoreLocation.CLMonitor.Events.Iterator
    public typealias AsyncIterator = CoreLocation.CLMonitor.Events.Iterator
  }
  #endif
  public struct CircularGeographicCondition : CoreLocation.CLCondition, Swift.Sendable {
    public let center: CoreLocation.CLLocationCoordinate2D
    public let radius: CoreLocation.CLLocationDistance
    public init(center: CoreLocation.CLLocationCoordinate2D, radius: CoreLocation.CLLocationDistance)
    public init(from decoder: any Swift.Decoder) throws
    public func encode(to encoder: any Swift.Encoder) throws
  }
  public func add(_ Condition: any CoreLocation.CLCondition, identifier: Swift.String)
  public func add(_ condition: any CoreLocation.CLCondition, identifier: Swift.String, assuming state: CoreLocation.CLMonitor.Event.State)
  public func remove(_ identifier: Swift.String)
  public func record(for identifier: Swift.String) -> CoreLocation.CLMonitor.Record?
  #if compiler(>=5.3) && $AsyncAwait
  public init(_ name: Swift.String) async
  #endif
  @objc deinit
  @available(iOS 17.0, macOS 14.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @_semantics("defaultActor") nonisolated final public var unownedExecutor: _Concurrency.UnownedSerialExecutor {
    get
  }
}
#endif
#if compiler(>=5.3) && $Actors
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
extension CoreLocation.CLMonitor {
  public struct MinimumAltitudeCondition : CoreLocation.CLCondition, Swift.Codable, Swift.Sendable {
    public let altitude: Swift.Double
    public init(altitude: Swift.Double)
    public init(from decoder: any Swift.Decoder) throws
    public func encode(to encoder: any Swift.Encoder) throws
  }
}
#endif
#if compiler(>=5.3) && $Actors
@available(iOS 17.0, macOS 14.0, *)
@available(macCatalyst, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension CoreLocation.CLMonitor {
  public struct BeaconIdentityCondition : CoreLocation.CLCondition, Swift.Sendable {
    public let uuid: Foundation.UUID
    public let major: Swift.UInt16?
    public let minor: Swift.UInt16?
    public init(uuid: Foundation.UUID)
    public init(uuid: Foundation.UUID, major: Swift.UInt16)
    public init(uuid: Foundation.UUID, major: Swift.UInt16, minor: Swift.UInt16)
    public init(from decoder: any Swift.Decoder) throws
    public func encode(to encoder: any Swift.Encoder) throws
  }
}
#endif
extension CoreLocation.CLError {
  @available(xrOS, unavailable)
  public var alternateRegion: CoreLocation.CLRegion? {
    get
  }
}
extension CoreLocation.CLLocationCoordinate2D : Swift._ObjectiveCBridgeable {
  public func _bridgeToObjectiveC() -> Foundation.NSValue
  public static func _forceBridgeFromObjectiveC(_ source: Foundation.NSValue, result: inout CoreLocation.CLLocationCoordinate2D?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Foundation.NSValue, result: inout CoreLocation.CLLocationCoordinate2D?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Foundation.NSValue?) -> CoreLocation.CLLocationCoordinate2D
  public typealias _ObjectiveCType = Foundation.NSValue
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
public struct CLLocationUpdate : Swift.Sendable {
  public let isStationary: Swift.Bool
  public let location: CoreLocation.CLLocation?
  public enum LiveConfiguration {
    case `default`
    case automotiveNavigation
    case otherNavigation
    case fitness
    case airborne
    public static func == (a: CoreLocation.CLLocationUpdate.LiveConfiguration, b: CoreLocation.CLLocationUpdate.LiveConfiguration) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  #if compiler(>=5.3) && $RethrowsProtocol
  public static func liveUpdates(_ configuration: CoreLocation.CLLocationUpdate.LiveConfiguration = .default) -> CoreLocation.CLLocationUpdate.Updates
  #endif
  #if compiler(>=5.3) && $RethrowsProtocol
  public struct Updates : _Concurrency.AsyncSequence, Swift.Sendable {
    public typealias Element = CoreLocation.CLLocationUpdate
    public struct Iterator : _Concurrency.AsyncIteratorProtocol {
      #if compiler(>=5.3) && $AsyncAwait
      public mutating func next() async throws -> CoreLocation.CLLocationUpdate.Updates.Element?
      #endif
      public typealias Element = CoreLocation.CLLocationUpdate.Updates.Element
    }
    public func makeAsyncIterator() -> CoreLocation.CLLocationUpdate.Updates.Iterator
    public typealias AsyncIterator = CoreLocation.CLLocationUpdate.Updates.Iterator
  }
  #endif
}
#if compiler(>=5.3) && $RethrowsProtocol
@available(*, unavailable)
extension CoreLocation.CLLocationUpdate.Updates.Iterator : Swift.Sendable {
}
#endif
@_hasMissingDesignatedInitializers @available(iOS 17.0, watchOS 10.0, *)
@available(tvOS, unavailable)
@available(macOS, unavailable)
final public class CLBackgroundActivitySession : Swift.Sendable {
  public init()
  final public func invalidate()
  @objc deinit
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension CoreLocation.CLLocationUpdate.LiveConfiguration : Swift.Equatable {}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension CoreLocation.CLLocationUpdate.LiveConfiguration : Swift.Hashable {}

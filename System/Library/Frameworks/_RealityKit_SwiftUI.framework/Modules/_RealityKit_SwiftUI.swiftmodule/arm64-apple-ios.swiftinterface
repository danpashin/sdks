// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.12.5 clang-1500.3.9.1.1)
// swift-module-flags: -target arm64-apple-ios17.4 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-concurrency -enable-experimental-feature ModuleInterfaceExportAs -enable-bare-slash-regex -user-module-version 225.621 -module-name _RealityKit_SwiftUI
import ARKit
import AVFAudio
import AVFoundation
import AudioToolbox
import Combine
import CoreGraphics
import Foundation
import ImageIO
import Metal
import Observation
import RealityFoundation
@_exported import RealityKit
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
import simd
@available(iOS 17.0, *)
@available(watchOS, unavailable)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct ObjectCaptureView<Overlay> : SwiftUI.View where Overlay : SwiftUI.View {
  public init(session: _RealityKit_SwiftUI.ObjectCaptureSession) where Overlay == SwiftUI.EmptyView
  public init(session: _RealityKit_SwiftUI.ObjectCaptureSession, @SwiftUI.ViewBuilder cameraFeedOverlay: () -> Overlay)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s19_RealityKit_SwiftUI17ObjectCaptureViewV4bodyQrvp", 0) __<Overlay>
}
@available(iOS 17.0, *)
@available(watchOS, unavailable)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor public class ObjectCaptureSession : Swift.Identifiable {
  #if compiler(>=5.3) && $RethrowsProtocol
  public struct Updates<Element> : _Concurrency.AsyncSequence, Swift.Sendable where Element : Swift.Sendable {
    public struct Iterator : _Concurrency.AsyncIteratorProtocol {
      #if compiler(>=5.3) && $AsyncAwait
      public mutating func next() async -> Element?
      #endif
    }
    public func makeAsyncIterator() -> _RealityKit_SwiftUI.ObjectCaptureSession.Updates<Element>.Iterator
    public typealias AsyncIterator = _RealityKit_SwiftUI.ObjectCaptureSession.Updates<Element>.Iterator
  }
  #endif
  public enum Error : Swift.Error, Foundation.LocalizedError {
    case directoryNotEmpty(Foundation.URL)
    case insufficientStorage(requiredBytes: Swift.Int64)
    case cancelled
    case sensorFailed
    case trackingFailed
    public var localizedDescription: Swift.String {
      get
    }
  }
  @_Concurrency.MainActor public static var isSupported: Swift.Bool {
    get
  }
  @_Concurrency.MainActor public init()
  public enum CaptureState : Swift.Equatable {
    case initializing
    case ready
    case detecting
    case capturing
    case finishing
    case completed
    case failed(any Swift.Error)
    public static func == (lhs: _RealityKit_SwiftUI.ObjectCaptureSession.CaptureState, rhs: _RealityKit_SwiftUI.ObjectCaptureSession.CaptureState) -> Swift.Bool
  }
  @_Concurrency.MainActor public var state: _RealityKit_SwiftUI.ObjectCaptureSession.CaptureState {
    get
  }
  #if compiler(>=5.3) && $RethrowsProtocol
  @_Concurrency.MainActor public var stateUpdates: _RealityKit_SwiftUI.ObjectCaptureSession.Updates<_RealityKit_SwiftUI.ObjectCaptureSession.CaptureState> {
    get
  }
  #endif
  public enum Feedback : Swift.Equatable {
    case objectTooClose
    case objectTooFar
    case movingTooFast
    case environmentLowLight
    case environmentTooDark
    case outOfFieldOfView
    case objectNotFlippable
    case overCapturing
    @available(iOS 17.4, *)
    @available(watchOS, unavailable)
    @available(macOS, unavailable)
    @available(macCatalyst, unavailable)
    @available(tvOS, unavailable)
    @available(visionOS, unavailable)
    case objectNotDetected
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: _RealityKit_SwiftUI.ObjectCaptureSession.Feedback, b: _RealityKit_SwiftUI.ObjectCaptureSession.Feedback) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor public var feedback: Swift.Set<_RealityKit_SwiftUI.ObjectCaptureSession.Feedback> {
    get
  }
  #if compiler(>=5.3) && $RethrowsProtocol
  @_Concurrency.MainActor public var feedbackUpdates: _RealityKit_SwiftUI.ObjectCaptureSession.Updates<Swift.Set<_RealityKit_SwiftUI.ObjectCaptureSession.Feedback>> {
    get
  }
  #endif
  public enum Tracking : Swift.Equatable {
    public enum Reason {
      case initializing
      case relocalizing
      case excessiveMotion
      case insufficientFeatures
      public static func == (a: _RealityKit_SwiftUI.ObjectCaptureSession.Tracking.Reason, b: _RealityKit_SwiftUI.ObjectCaptureSession.Tracking.Reason) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    case notAvailable
    case limited(reason: _RealityKit_SwiftUI.ObjectCaptureSession.Tracking.Reason)
    case normal
    public static func == (a: _RealityKit_SwiftUI.ObjectCaptureSession.Tracking, b: _RealityKit_SwiftUI.ObjectCaptureSession.Tracking) -> Swift.Bool
  }
  @_Concurrency.MainActor public var cameraTracking: _RealityKit_SwiftUI.ObjectCaptureSession.Tracking {
    get
  }
  #if compiler(>=5.3) && $RethrowsProtocol
  @_Concurrency.MainActor public var cameraTrackingUpdates: _RealityKit_SwiftUI.ObjectCaptureSession.Updates<_RealityKit_SwiftUI.ObjectCaptureSession.Tracking> {
    get
  }
  #endif
  @_Concurrency.MainActor public var isPaused: Swift.Bool {
    get
  }
  #if compiler(>=5.3) && $RethrowsProtocol
  @_Concurrency.MainActor public var isPausedUpdates: _RealityKit_SwiftUI.ObjectCaptureSession.Updates<Swift.Bool> {
    get
  }
  #endif
  @_Concurrency.MainActor public var userCompletedScanPass: Swift.Bool {
    get
  }
  #if compiler(>=5.3) && $RethrowsProtocol
  @_Concurrency.MainActor public var userCompletedScanPassUpdates: _RealityKit_SwiftUI.ObjectCaptureSession.Updates<Swift.Bool> {
    get
  }
  #endif
  @_Concurrency.MainActor public var canRequestImageCapture: Swift.Bool {
    get
  }
  #if compiler(>=5.3) && $RethrowsProtocol
  @_Concurrency.MainActor public var canRequestImageCaptureUpdates: _RealityKit_SwiftUI.ObjectCaptureSession.Updates<Swift.Bool> {
    get
  }
  #endif
  @_Concurrency.MainActor public var numberOfShotsTaken: Swift.Int {
    get
  }
  #if compiler(>=5.3) && $RethrowsProtocol
  @_Concurrency.MainActor public var numberOfShotsTakenUpdates: _RealityKit_SwiftUI.ObjectCaptureSession.Updates<Swift.Int> {
    get
  }
  #endif
  @_Concurrency.MainActor public var maximumNumberOfInputImages: Swift.Int {
    get
  }
  public struct Configuration {
    public init()
    public var checkpointDirectory: Foundation.URL?
    public var isOverCaptureEnabled: Swift.Bool
  }
  @_Concurrency.MainActor public var configuration: _RealityKit_SwiftUI.ObjectCaptureSession.Configuration {
    get
  }
  @_Concurrency.MainActor public func start(imagesDirectory: Foundation.URL, configuration: _RealityKit_SwiftUI.ObjectCaptureSession.Configuration = Configuration())
  @_Concurrency.MainActor public func resume()
  @_Concurrency.MainActor public func pause()
  @_Concurrency.MainActor public func startDetecting() -> Swift.Bool
  @discardableResult
  @_Concurrency.MainActor public func resetDetection() -> Swift.Bool
  @_Concurrency.MainActor public func startCapturing()
  @_Concurrency.MainActor public func beginNewScanPassAfterFlip()
  @_Concurrency.MainActor public func beginNewScanPass()
  @_Concurrency.MainActor public func finish()
  @_Concurrency.MainActor public func cancel()
  @_Concurrency.MainActor public func requestImageCapture()
  @objc deinit
  public typealias ID = Swift.ObjectIdentifier
}
@available(iOS 17.0, *)
@available(watchOS, unavailable)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension _RealityKit_SwiftUI.ObjectCaptureSession : Observation.Observable {
}
@available(iOS 17.0, *)
@available(watchOS, unavailable)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@_Concurrency.MainActor public struct ObjectCapturePointCloudView : SwiftUI.View {
  @_Concurrency.MainActor public init(session: _RealityKit_SwiftUI.ObjectCaptureSession)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s19_RealityKit_SwiftUI27ObjectCapturePointCloudViewV4bodyQrvp", 0) __
}
@available(iOS 17.0, *)
@available(watchOS, unavailable)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension _RealityKit_SwiftUI.ObjectCaptureSession : Swift.Sendable {}
@available(iOS 17.0, *)
@available(watchOS, unavailable)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension _RealityKit_SwiftUI.ObjectCaptureSession.Feedback : Swift.Hashable {}
@available(iOS 17.0, *)
@available(watchOS, unavailable)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension _RealityKit_SwiftUI.ObjectCaptureSession.Tracking.Reason : Swift.Equatable {}
@available(iOS 17.0, *)
@available(watchOS, unavailable)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension _RealityKit_SwiftUI.ObjectCaptureSession.Tracking.Reason : Swift.Hashable {}
@available(iOS 17.0, *)
@available(watchOS, unavailable)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension _RealityKit_SwiftUI.ObjectCapturePointCloudView : Swift.Sendable {}

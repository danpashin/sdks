// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.123.204 clang-1500.0.37.1)
// swift-module-flags: -target arm64-apple-ios17.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -module-name _MapKit_SwiftUI
// swift-module-flags-ignorable: -enable-bare-slash-regex -user-module-version 2417.30.7.28.1
import CoreLocation
import Foundation
@_exported import MapKit
import Swift
import SwiftUI
import UniformTypeIdentifiers
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
public struct UserLocation {
  public var location: CoreLocation.CLLocation? {
    get
  }
  public var heading: CoreLocation.CLHeading? {
    get
  }
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
public struct PointOfInterestCategories {
  public static var all: _MapKit_SwiftUI.PointOfInterestCategories {
    get
  }
  public static func including(_ categories: [MapKit.MKPointOfInterestCategory]) -> _MapKit_SwiftUI.PointOfInterestCategories
  public static func including(_ categories: MapKit.MKPointOfInterestCategory...) -> _MapKit_SwiftUI.PointOfInterestCategories
  public static func excluding(_ categories: [MapKit.MKPointOfInterestCategory]) -> _MapKit_SwiftUI.PointOfInterestCategories
  public static func excluding(_ categories: MapKit.MKPointOfInterestCategory...) -> _MapKit_SwiftUI.PointOfInterestCategories
  public static var excludingAll: _MapKit_SwiftUI.PointOfInterestCategories {
    get
  }
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension _MapKit_SwiftUI.PointOfInterestCategories : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral: MapKit.MKPointOfInterestCategory...)
  public typealias ArrayLiteralElement = MapKit.MKPointOfInterestCategory
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
public protocol MapContent {
  associatedtype Body : _MapKit_SwiftUI.MapContent
  @_MapKit_SwiftUI.MapContentBuilder @_Concurrency.MainActor(unsafe) var body: Self.Body { get }
  static func _makeMapContent(content: SwiftUI._GraphValue<Self>, inputs: _MapKit_SwiftUI._MapContentInputs) -> _MapKit_SwiftUI._MapContentOutputs
  static func _mapContentCount(inputs: _MapKit_SwiftUI._MapContentInputs) -> Swift.Int?
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
public struct _MapContentInputs {
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
public struct _MapContentOutputs {
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension _MapKit_SwiftUI.MapContent {
  public static func _makeMapContent(content: SwiftUI._GraphValue<Self>, inputs: _MapKit_SwiftUI._MapContentInputs) -> _MapKit_SwiftUI._MapContentOutputs
  public static func _mapContentCount(inputs: _MapKit_SwiftUI._MapContentInputs) -> Swift.Int?
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension Swift.Never {
  public typealias MapContentValue = Swift.Never
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension Swift.Never : _MapKit_SwiftUI.MapContent {
  public static func _mapContentCount(inputs: _MapKit_SwiftUI._MapContentInputs) -> Swift.Int?
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
public struct EmptyMapContent : _MapKit_SwiftUI.MapContent {
  public init()
  public static func _makeMapContent(content: SwiftUI._GraphValue<_MapKit_SwiftUI.EmptyMapContent>, inputs: _MapKit_SwiftUI._MapContentInputs) -> _MapKit_SwiftUI._MapContentOutputs
  public typealias Body = Swift.Never
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
@_functionBuilder public struct MapContentBuilder {
  @_alwaysEmitIntoClient public static func buildExpression<Content>(_ content: Content) -> Content where Content : _MapKit_SwiftUI.MapContent {
       content
    }
  @_alwaysEmitIntoClient public static func buildBlock() -> _MapKit_SwiftUI.EmptyMapContent {
        EmptyMapContent()
    }
  @_alwaysEmitIntoClient public static func buildBlock<C>(_ content: C) -> C where C : _MapKit_SwiftUI.MapContent {
        content
    }
  @_alwaysEmitIntoClient public static func buildIf<Content>(_ content: Content?) -> Content? where Content : _MapKit_SwiftUI.MapContent {
        content
    }
  @_alwaysEmitIntoClient public static func buildEither<TrueContent, FalseContent>(first: TrueContent) -> _MapKit_SwiftUI._ConditionalMapContent<TrueContent, FalseContent> where TrueContent : _MapKit_SwiftUI.MapContent, FalseContent : _MapKit_SwiftUI.MapContent {
        _ConditionalMapContent(trueContent: first, falseType: FalseContent.self)
    }
  @_alwaysEmitIntoClient public static func buildEither<TrueContent, FalseContent>(second: FalseContent) -> _MapKit_SwiftUI._ConditionalMapContent<TrueContent, FalseContent> where TrueContent : _MapKit_SwiftUI.MapContent, FalseContent : _MapKit_SwiftUI.MapContent {
        _ConditionalMapContent(falseContent: second, trueType: TrueContent.self)
    }
  @_alwaysEmitIntoClient public static func buildLimitedAvailability<Content>(_ content: Content) -> some _MapKit_SwiftUI.MapContent where Content : _MapKit_SwiftUI.MapContent {
        content
    }
  
}
@available(iOS, introduced: 14.0, deprecated: 17.0, message: "Use Map initializers that take a `position` parameter along with\nMapCameraPosition.userLocation to configure the user location\ntracking behavior.")
@available(macOS, introduced: 11.0, deprecated: 14.0, message: "Use Map initializers that take a `position` parameter along with\nMapCameraPosition.userLocation to configure the user location\ntracking behavior.")
@available(tvOS, introduced: 14.0, deprecated: 17.0, message: "Use Map initializers that take a `position` parameter along with\nMapCameraPosition.userLocation to configure the user location\ntracking behavior.")
@available(watchOS, introduced: 7.0, deprecated: 10.0, message: "Use Map initializers that take a `position` parameter along with\nMapCameraPosition.userLocation to configure the user location\ntracking behavior.")
public enum MapUserTrackingMode {
  case none
  case follow
  @available(iOS 17.0, watchOS 10.0, tvOS 17.0, *)
  @available(macOS, unavailable)
  case followWithHeading
  public static func == (a: _MapKit_SwiftUI.MapUserTrackingMode, b: _MapKit_SwiftUI.MapUserTrackingMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension SwiftUI.ForEach : _MapKit_SwiftUI.MapContent where Content : _MapKit_SwiftUI.MapContent {
  public static func _makeMapContent(content: SwiftUI._GraphValue<SwiftUI.ForEach<Data, ID, Content>>, inputs: _MapKit_SwiftUI._MapContentInputs) -> _MapKit_SwiftUI._MapContentOutputs
  public typealias Body = Swift.Never
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension SwiftUI.ForEach where Content : _MapKit_SwiftUI.MapContent {
  public init(_ data: Data, @_MapKit_SwiftUI.MapContentBuilder content: @escaping (Data.Element) -> Content) where ID == Data.Element.ID, Data.Element : Swift.Identifiable
  public init(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, @_MapKit_SwiftUI.MapContentBuilder content: @escaping (Data.Element) -> Content)
  @_semantics("swiftui.requires_constant_range") public init(_ data: Swift.Range<Swift.Int>, @_MapKit_SwiftUI.MapContentBuilder content: @escaping (Swift.Int) -> Content) where Data == Swift.Range<Swift.Int>, ID == Swift.Int
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
public protocol DynamicMapContent : _MapKit_SwiftUI.MapContent {
  associatedtype Data : Swift.Collection
  var data: Self.Data { get }
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension SwiftUI.ForEach : _MapKit_SwiftUI.DynamicMapContent where Content : _MapKit_SwiftUI.MapContent {
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@available(watchOS, unavailable)
public struct MapPitchToggle : SwiftUI.View {
  public init(scope: SwiftUI.Namespace.ID? = nil)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s15_MapKit_SwiftUI0A11PitchToggleV4bodyQrvp", 0) __
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension _MapKit_SwiftUI.MapContent {
  public func tint<S>(_ tint: S) -> some _MapKit_SwiftUI.MapContent where S : SwiftUI.ShapeStyle
  
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension _MapKit_SwiftUI.MapContent {
  public func annotationTitles(_ visibility: SwiftUI.Visibility) -> some _MapKit_SwiftUI.MapContent
  
  public func annotationSubtitles(_ visibility: SwiftUI.Visibility) -> some _MapKit_SwiftUI.MapContent
  
}
@available(macOS 14.0, macCatalyst 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct MapPitchSlider : SwiftUI.View {
  public init(scope: SwiftUI.Namespace.ID? = nil)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s15_MapKit_SwiftUI0A11PitchSliderV4bodyQrvp", 0) __
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
public struct Marker<Label> : _MapKit_SwiftUI.MapContent where Label : SwiftUI.View {
  public init(coordinate: CoreLocation.CLLocationCoordinate2D, @SwiftUI.ViewBuilder label: () -> Label)
  public init(_ titleKey: SwiftUI.LocalizedStringKey, coordinate: CoreLocation.CLLocationCoordinate2D) where Label == SwiftUI.Text
  @_disfavoredOverload public init<S>(_ title: S, coordinate: CoreLocation.CLLocationCoordinate2D) where Label == SwiftUI.Text, S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, monogram: SwiftUI.Text, coordinate: CoreLocation.CLLocationCoordinate2D) where Label == SwiftUI.Label<SwiftUI.Text, SwiftUI.Text>
  @_disfavoredOverload public init<S>(_ title: S, monogram: SwiftUI.Text, coordinate: CoreLocation.CLLocationCoordinate2D) where Label == SwiftUI.Label<SwiftUI.Text, SwiftUI.Text>, S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, systemImage: Swift.String, coordinate: CoreLocation.CLLocationCoordinate2D) where Label == SwiftUI.Label<SwiftUI.Text, SwiftUI.Image>
  @_disfavoredOverload public init<S>(_ title: S, systemImage: Swift.String, coordinate: CoreLocation.CLLocationCoordinate2D) where Label == SwiftUI.Label<SwiftUI.Text, SwiftUI.Image>, S : Swift.StringProtocol
  public init(_ titleKey: SwiftUI.LocalizedStringKey, image: Swift.String, coordinate: CoreLocation.CLLocationCoordinate2D) where Label == SwiftUI.Label<SwiftUI.Text, SwiftUI.Image>
  @_disfavoredOverload public init<S>(_ title: S, image: Swift.String, coordinate: CoreLocation.CLLocationCoordinate2D) where Label == SwiftUI.Label<SwiftUI.Text, SwiftUI.Image>, S : Swift.StringProtocol
  public init(item: MapKit.MKMapItem) where Label == SwiftUI.Text
  public static func _mapContentCount(inputs: _MapKit_SwiftUI._MapContentInputs) -> Swift.Int?
  public static func _makeMapContent(content: SwiftUI._GraphValue<_MapKit_SwiftUI.Marker<Label>>, inputs: _MapKit_SwiftUI._MapContentInputs) -> _MapKit_SwiftUI._MapContentOutputs
  public typealias Body = Swift.Never
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
public struct UserAnnotation<Content> : _MapKit_SwiftUI.MapContent where Content : SwiftUI.View {
  @_disfavoredOverload public init(anchor: SwiftUI.UnitPoint = .center) where Content == SwiftUI.EmptyView
  public init() where Content == _MapKit_SwiftUI.DefaultUserAnnotationContent
  public init(anchor: SwiftUI.UnitPoint = .center, @SwiftUI.ViewBuilder content: @escaping () -> Content)
  public init(anchor: SwiftUI.UnitPoint = .center, @SwiftUI.ViewBuilder content: @escaping (_MapKit_SwiftUI.UserLocation) -> Content)
  public static func _mapContentCount(inputs: _MapKit_SwiftUI._MapContentInputs) -> Swift.Int?
  public static func _makeMapContent(content: SwiftUI._GraphValue<_MapKit_SwiftUI.UserAnnotation<Content>>, inputs: _MapKit_SwiftUI._MapContentInputs) -> _MapKit_SwiftUI._MapContentOutputs
  public typealias Body = Swift.Never
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
public struct DefaultUserAnnotationContent : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s15_MapKit_SwiftUI28DefaultUserAnnotationContentV4bodyQrvp", 0) __
}
@available(iOS 14.0, tvOS 14.0, macOS 11.0, watchOS 7.0, *)
public protocol MapAnnotationProtocol {
  var _annotationData: _MapKit_SwiftUI._MapAnnotationData { get }
}
@available(iOS, introduced: 14.0, deprecated: 17.0, message: "Use Annotation along with Map initializers that take a MapContentBuilder instead.")
@available(macOS, introduced: 11.0, deprecated: 14.0, message: "Use Annotation along with Map initializers that take a MapContentBuilder instead.")
@available(tvOS, introduced: 14.0, deprecated: 17.0, message: "Use Annotation along with Map initializers that take a MapContentBuilder instead.")
@available(watchOS, introduced: 7.0, deprecated: 10.0, message: "Use Annotation along with Map initializers that take a MapContentBuilder instead.")
public struct MapAnnotation<Content> : _MapKit_SwiftUI.MapAnnotationProtocol where Content : SwiftUI.View {
  public init(coordinate: CoreLocation.CLLocationCoordinate2D, anchorPoint: CoreFoundation.CGPoint = CGPoint(x: 0.5, y: 0.5), @SwiftUI.ViewBuilder content: () -> Content)
  public var _annotationData: _MapKit_SwiftUI._MapAnnotationData {
    get
  }
}
@available(iOS, introduced: 14.0, deprecated: 16.0, message: "Use Marker")
@available(tvOS, introduced: 14.0, deprecated: 16.0, message: "Use Marker")
@available(macOS, introduced: 11.0, deprecated: 13.0, message: "Use Marker")
@available(watchOS, introduced: 7.0, deprecated: 9.0, message: "Use Marker")
public struct MapPin : _MapKit_SwiftUI.MapAnnotationProtocol {
  public init(coordinate: CoreLocation.CLLocationCoordinate2D, tint: SwiftUI.Color? = nil)
  public var _annotationData: _MapKit_SwiftUI._MapAnnotationData {
    get
  }
}
@available(iOS, introduced: 14.0, deprecated: 17.0, message: "Use Marker along with Map initializers that take a MapContentBuilder instead.")
@available(macOS, introduced: 11.0, deprecated: 14.0, message: "Use Marker along with Map initializers that take a MapContentBuilder instead.")
@available(tvOS, introduced: 14.0, deprecated: 17.0, message: "Use Marker along with Map initializers that take a MapContentBuilder instead.")
@available(watchOS, introduced: 7.0, deprecated: 10.0, message: "Use Marker along with Map initializers that take a MapContentBuilder instead.")
public struct MapMarker : _MapKit_SwiftUI.MapAnnotationProtocol {
  public init(coordinate: CoreLocation.CLLocationCoordinate2D, tint: SwiftUI.Color? = nil)
  public var _annotationData: _MapKit_SwiftUI._MapAnnotationData {
    get
  }
}
@available(iOS 14.0, tvOS 14.0, macOS 11.0, watchOS 7.0, *)
public struct _MapAnnotationData {
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension SwiftUI.View {
  public func mapCameraKeyframeAnimator(trigger: some Equatable, @SwiftUI.KeyframesBuilder<_MapKit_SwiftUI.MapCamera> keyframes: @escaping (_MapKit_SwiftUI.MapCamera) -> some Keyframes<MapCamera>) -> some SwiftUI.View
  
}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension MapKit.MKMapItemRequest {
  convenience public init(feature: _MapKit_SwiftUI.MapFeature)
  public var feature: _MapKit_SwiftUI.MapFeature {
    get
  }
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension SwiftUI.View {
  public func onMapCameraChange(frequency: _MapKit_SwiftUI.MapCameraUpdateFrequency = .onEnd, _ action: @escaping () -> Swift.Void) -> some SwiftUI.View
  
  public func onMapCameraChange(frequency: _MapKit_SwiftUI.MapCameraUpdateFrequency = .onEnd, _ action: @escaping (_MapKit_SwiftUI.MapCameraUpdateContext) -> Swift.Void) -> some SwiftUI.View
  
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
public struct MapCameraUpdateContext {
  public let camera: _MapKit_SwiftUI.MapCamera
  public let region: MapKit.MKCoordinateRegion
  public let rect: MapKit.MKMapRect
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
public struct MapCameraUpdateFrequency {
  public static var onEnd: _MapKit_SwiftUI.MapCameraUpdateFrequency {
    get
  }
  public static var continuous: _MapKit_SwiftUI.MapCameraUpdateFrequency {
    get
  }
}
@available(iOS 14.0, tvOS 14.0, macOS 11.0, watchOS 7.0, *)
public struct Map<Content> : SwiftUI.View where Content : SwiftUI.View {
  @available(iOS, introduced: 14.0, deprecated: 17.0, message: "Use Map initializers that take a MapContentBuilder instead.")
  @available(macOS, introduced: 11.0, deprecated: 14.0, message: "Use Map initializers that take a MapContentBuilder instead.")
  @available(tvOS, introduced: 14.0, deprecated: 17.0, message: "Use Map initializers that take a MapContentBuilder instead.")
  @available(watchOS, introduced: 7.0, deprecated: 10.0, message: "Use Map initializers that take a MapContentBuilder instead.")
  public init<Items, Annotation>(mapRect: SwiftUI.Binding<MapKit.MKMapRect>, interactionModes: _MapKit_SwiftUI.MapInteractionModes = .all, showsUserLocation: Swift.Bool = false, userTrackingMode: SwiftUI.Binding<_MapKit_SwiftUI.MapUserTrackingMode>? = nil, annotationItems: Items, annotationContent: @escaping (Items.Element) -> Annotation) where Content == _MapKit_SwiftUI._DefaultAnnotatedMapContent<Items>, Items : Swift.RandomAccessCollection, Annotation : _MapKit_SwiftUI.MapAnnotationProtocol, Items.Element : Swift.Identifiable
  @available(iOS, introduced: 14.0, deprecated: 17.0, message: "Use Map initializers that take a MapContentBuilder instead.")
  @available(macOS, introduced: 11.0, deprecated: 14.0, message: "Use Map initializers that take a MapContentBuilder instead.")
  @available(tvOS, introduced: 14.0, deprecated: 17.0, message: "Use Map initializers that take a MapContentBuilder instead.")
  @available(watchOS, introduced: 7.0, deprecated: 10.0, message: "Use Map initializers that take a MapContentBuilder instead.")
  public init<Items, Annotation>(coordinateRegion: SwiftUI.Binding<MapKit.MKCoordinateRegion>, interactionModes: _MapKit_SwiftUI.MapInteractionModes = .all, showsUserLocation: Swift.Bool = false, userTrackingMode: SwiftUI.Binding<_MapKit_SwiftUI.MapUserTrackingMode>? = nil, annotationItems: Items, annotationContent: @escaping (Items.Element) -> Annotation) where Content == _MapKit_SwiftUI._DefaultAnnotatedMapContent<Items>, Items : Swift.RandomAccessCollection, Annotation : _MapKit_SwiftUI.MapAnnotationProtocol, Items.Element : Swift.Identifiable
  @available(iOS, introduced: 14.0, deprecated: 17.0, message: "Use Map initializers that take a MapContentBuilder instead.")
  @available(macOS, introduced: 11.0, deprecated: 14.0, message: "Use Map initializers that take a MapContentBuilder instead.")
  @available(tvOS, introduced: 14.0, deprecated: 17.0, message: "Use Map initializers that take a MapContentBuilder instead.")
  @available(watchOS, introduced: 7.0, deprecated: 10.0, message: "Use Map initializers that take a MapContentBuilder instead.")
  public init(mapRect: SwiftUI.Binding<MapKit.MKMapRect>, interactionModes: _MapKit_SwiftUI.MapInteractionModes = .all, showsUserLocation: Swift.Bool = false, userTrackingMode: SwiftUI.Binding<_MapKit_SwiftUI.MapUserTrackingMode>? = nil) where Content == _MapKit_SwiftUI._DefaultMapContent
  @available(iOS, introduced: 14.0, deprecated: 17.0, message: "Use Map initializers that take a MapContentBuilder instead.")
  @available(macOS, introduced: 11.0, deprecated: 14.0, message: "Use Map initializers that take a MapContentBuilder instead.")
  @available(tvOS, introduced: 14.0, deprecated: 17.0, message: "Use Map initializers that take a MapContentBuilder instead.")
  @available(watchOS, introduced: 7.0, deprecated: 10.0, message: "Use Map initializers that take a MapContentBuilder instead.")
  public init(coordinateRegion: SwiftUI.Binding<MapKit.MKCoordinateRegion>, interactionModes: _MapKit_SwiftUI.MapInteractionModes = .all, showsUserLocation: Swift.Bool = false, userTrackingMode: SwiftUI.Binding<_MapKit_SwiftUI.MapUserTrackingMode>? = nil) where Content == _MapKit_SwiftUI._DefaultMapContent
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s15_MapKit_SwiftUI0A0V4bodyQrvp", 0) __<Content>
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension _MapKit_SwiftUI.Map {
  public init(bounds: _MapKit_SwiftUI.MapCameraBounds? = nil, interactionModes: _MapKit_SwiftUI.MapInteractionModes = .all, scope: SwiftUI.Namespace.ID? = nil) where Content == _MapKit_SwiftUI.MapContentView<Swift.Never, _MapKit_SwiftUI.EmptyMapContent>
  public init<C>(bounds: _MapKit_SwiftUI.MapCameraBounds? = nil, interactionModes: _MapKit_SwiftUI.MapInteractionModes = .all, scope: SwiftUI.Namespace.ID? = nil, @_MapKit_SwiftUI.MapContentBuilder content: () -> C) where Content == _MapKit_SwiftUI.MapContentView<Swift.Never, C>, C : _MapKit_SwiftUI.MapContent
  public init(initialPosition: _MapKit_SwiftUI.MapCameraPosition, bounds: _MapKit_SwiftUI.MapCameraBounds? = nil, interactionModes: _MapKit_SwiftUI.MapInteractionModes = .all, scope: SwiftUI.Namespace.ID? = nil) where Content == _MapKit_SwiftUI.MapContentView<Swift.Never, _MapKit_SwiftUI.EmptyMapContent>
  public init<C>(initialPosition: _MapKit_SwiftUI.MapCameraPosition, bounds: _MapKit_SwiftUI.MapCameraBounds? = nil, interactionModes: _MapKit_SwiftUI.MapInteractionModes = .all, scope: SwiftUI.Namespace.ID? = nil, @_MapKit_SwiftUI.MapContentBuilder content: () -> C) where Content == _MapKit_SwiftUI.MapContentView<Swift.Never, C>, C : _MapKit_SwiftUI.MapContent
  public init(position: SwiftUI.Binding<_MapKit_SwiftUI.MapCameraPosition>, bounds: _MapKit_SwiftUI.MapCameraBounds? = nil, interactionModes: _MapKit_SwiftUI.MapInteractionModes = .all, scope: SwiftUI.Namespace.ID? = nil) where Content == _MapKit_SwiftUI.MapContentView<Swift.Never, _MapKit_SwiftUI.EmptyMapContent>
  public init<C>(position: SwiftUI.Binding<_MapKit_SwiftUI.MapCameraPosition>, bounds: _MapKit_SwiftUI.MapCameraBounds? = nil, interactionModes: _MapKit_SwiftUI.MapInteractionModes = .all, scope: SwiftUI.Namespace.ID? = nil, @_MapKit_SwiftUI.MapContentBuilder content: () -> C) where Content == _MapKit_SwiftUI.MapContentView<Swift.Never, C>, C : _MapKit_SwiftUI.MapContent
  @_disfavoredOverload public init<SelectedValue>(bounds: _MapKit_SwiftUI.MapCameraBounds? = nil, interactionModes: _MapKit_SwiftUI.MapInteractionModes = .all, selection: SwiftUI.Binding<SelectedValue?>, scope: SwiftUI.Namespace.ID? = nil) where Content == _MapKit_SwiftUI.MapContentView<SelectedValue, _MapKit_SwiftUI.EmptyMapContent>, SelectedValue : Swift.Hashable
  @_disfavoredOverload public init<SelectedValue, C>(bounds: _MapKit_SwiftUI.MapCameraBounds? = nil, interactionModes: _MapKit_SwiftUI.MapInteractionModes = .all, selection: SwiftUI.Binding<SelectedValue?>, scope: SwiftUI.Namespace.ID? = nil, @_MapKit_SwiftUI.MapContentBuilder content: () -> C) where Content == _MapKit_SwiftUI.MapContentView<SelectedValue, C>, SelectedValue : Swift.Hashable, C : _MapKit_SwiftUI.MapContent
  @_disfavoredOverload public init<SelectedValue, C>(initialPosition: _MapKit_SwiftUI.MapCameraPosition, bounds: _MapKit_SwiftUI.MapCameraBounds? = nil, interactionModes: _MapKit_SwiftUI.MapInteractionModes = .all, selection: SwiftUI.Binding<SelectedValue?>, scope: SwiftUI.Namespace.ID? = nil, @_MapKit_SwiftUI.MapContentBuilder content: () -> C) where Content == _MapKit_SwiftUI.MapContentView<SelectedValue, C>, SelectedValue : Swift.Hashable, C : _MapKit_SwiftUI.MapContent
  @_disfavoredOverload public init<SelectedValue, C>(position: SwiftUI.Binding<_MapKit_SwiftUI.MapCameraPosition>, bounds: _MapKit_SwiftUI.MapCameraBounds? = nil, interactionModes: _MapKit_SwiftUI.MapInteractionModes = .all, selection: SwiftUI.Binding<SelectedValue?>, scope: SwiftUI.Namespace.ID? = nil, @_MapKit_SwiftUI.MapContentBuilder content: () -> C) where Content == _MapKit_SwiftUI.MapContentView<SelectedValue, C>, SelectedValue : Swift.Hashable, C : _MapKit_SwiftUI.MapContent
}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension _MapKit_SwiftUI.Map {
  public init(bounds: _MapKit_SwiftUI.MapCameraBounds? = nil, interactionModes: _MapKit_SwiftUI.MapInteractionModes = .all, selection: SwiftUI.Binding<_MapKit_SwiftUI.MapFeature?>, scope: SwiftUI.Namespace.ID? = nil) where Content == _MapKit_SwiftUI.MapContentView<_MapKit_SwiftUI.MapFeature, _MapKit_SwiftUI.EmptyMapContent>
  public init<C>(bounds: _MapKit_SwiftUI.MapCameraBounds? = nil, interactionModes: _MapKit_SwiftUI.MapInteractionModes = .all, selection: SwiftUI.Binding<_MapKit_SwiftUI.MapFeature?>, scope: SwiftUI.Namespace.ID? = nil, @_MapKit_SwiftUI.MapContentBuilder content: () -> C) where Content == _MapKit_SwiftUI.MapContentView<_MapKit_SwiftUI.MapFeature, C>, C : _MapKit_SwiftUI.MapContent
  public init(initialPosition: _MapKit_SwiftUI.MapCameraPosition, bounds: _MapKit_SwiftUI.MapCameraBounds? = nil, interactionModes: _MapKit_SwiftUI.MapInteractionModes = .all, selection: SwiftUI.Binding<_MapKit_SwiftUI.MapFeature?>, scope: SwiftUI.Namespace.ID? = nil) where Content == _MapKit_SwiftUI.MapContentView<_MapKit_SwiftUI.MapFeature, _MapKit_SwiftUI.EmptyMapContent>
  public init<C>(initialPosition: _MapKit_SwiftUI.MapCameraPosition, bounds: _MapKit_SwiftUI.MapCameraBounds? = nil, interactionModes: _MapKit_SwiftUI.MapInteractionModes = .all, selection: SwiftUI.Binding<_MapKit_SwiftUI.MapFeature?>, scope: SwiftUI.Namespace.ID? = nil, @_MapKit_SwiftUI.MapContentBuilder content: () -> C) where Content == _MapKit_SwiftUI.MapContentView<_MapKit_SwiftUI.MapFeature, C>, C : _MapKit_SwiftUI.MapContent
  public init(position: SwiftUI.Binding<_MapKit_SwiftUI.MapCameraPosition>, bounds: _MapKit_SwiftUI.MapCameraBounds? = nil, interactionModes: _MapKit_SwiftUI.MapInteractionModes = .all, selection: SwiftUI.Binding<_MapKit_SwiftUI.MapFeature?>, scope: SwiftUI.Namespace.ID? = nil) where Content == _MapKit_SwiftUI.MapContentView<_MapKit_SwiftUI.MapFeature, _MapKit_SwiftUI.EmptyMapContent>
  public init<C>(position: SwiftUI.Binding<_MapKit_SwiftUI.MapCameraPosition>, bounds: _MapKit_SwiftUI.MapCameraBounds? = nil, interactionModes: _MapKit_SwiftUI.MapInteractionModes = .all, selection: SwiftUI.Binding<_MapKit_SwiftUI.MapFeature?>, scope: SwiftUI.Namespace.ID? = nil, @_MapKit_SwiftUI.MapContentBuilder content: () -> C) where Content == _MapKit_SwiftUI.MapContentView<_MapKit_SwiftUI.MapFeature, C>, C : _MapKit_SwiftUI.MapContent
  public init<SelectedValue, C>(bounds: _MapKit_SwiftUI.MapCameraBounds? = nil, interactionModes: _MapKit_SwiftUI.MapInteractionModes = .all, selection: SwiftUI.Binding<SelectedValue?>, scope: SwiftUI.Namespace.ID? = nil, @_MapKit_SwiftUI.MapContentBuilder content: () -> C) where Content == _MapKit_SwiftUI.MapSelectableContentView<SelectedValue, C>, SelectedValue : _MapKit_SwiftUI.MapSelectable, C : _MapKit_SwiftUI.MapContent
  public init<SelectedValue, C>(initialPosition: _MapKit_SwiftUI.MapCameraPosition, bounds: _MapKit_SwiftUI.MapCameraBounds? = nil, interactionModes: _MapKit_SwiftUI.MapInteractionModes = .all, selection: SwiftUI.Binding<SelectedValue?>, scope: SwiftUI.Namespace.ID? = nil, @_MapKit_SwiftUI.MapContentBuilder content: () -> C) where Content == _MapKit_SwiftUI.MapSelectableContentView<SelectedValue, C>, SelectedValue : _MapKit_SwiftUI.MapSelectable, C : _MapKit_SwiftUI.MapContent
  public init<SelectedValue, C>(position: SwiftUI.Binding<_MapKit_SwiftUI.MapCameraPosition>, bounds: _MapKit_SwiftUI.MapCameraBounds? = nil, interactionModes: _MapKit_SwiftUI.MapInteractionModes = .all, selection: SwiftUI.Binding<SelectedValue?>, scope: SwiftUI.Namespace.ID? = nil, @_MapKit_SwiftUI.MapContentBuilder content: () -> C) where Content == _MapKit_SwiftUI.MapSelectableContentView<SelectedValue, C>, SelectedValue : _MapKit_SwiftUI.MapSelectable, C : _MapKit_SwiftUI.MapContent
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension SwiftUI.Group : _MapKit_SwiftUI.MapContent where Content : _MapKit_SwiftUI.MapContent {
  public init(@_MapKit_SwiftUI.MapContentBuilder content: () -> Content)
  public static func _makeMapContent(content: SwiftUI._GraphValue<SwiftUI.Group<Content>>, inputs: _MapKit_SwiftUI._MapContentInputs) -> _MapKit_SwiftUI._MapContentOutputs
  public static func _mapContentCount(inputs: _MapKit_SwiftUI._MapContentInputs) -> Swift.Int?
}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct MapSelectableContentView<SelectionValue, Content> : SwiftUI.View where SelectionValue : _MapKit_SwiftUI.MapSelectable, Content : _MapKit_SwiftUI.MapContent {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s15_MapKit_SwiftUI0A21SelectableContentViewV4bodyQrvp", 0) __<SelectionValue, Content>
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
public struct MapContentView<SelectionValue, Content> : SwiftUI.View where SelectionValue : Swift.Hashable, Content : _MapKit_SwiftUI.MapContent {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s15_MapKit_SwiftUI0A11ContentViewV4bodyQrvp", 0) __<SelectionValue, Content>
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
public struct MapPolygon {
  public init(coordinates: [CoreLocation.CLLocationCoordinate2D])
  public init(points: [MapKit.MKMapPoint])
  @available(watchOS, unavailable)
  public init(_ polygon: MapKit.MKPolygon)
  public static func _mapContentCount(inputs: _MapKit_SwiftUI._MapContentInputs) -> Swift.Int?
  public static func _makeMapContent(content: SwiftUI._GraphValue<_MapKit_SwiftUI.MapPolygon>, inputs: _MapKit_SwiftUI._MapContentInputs) -> _MapKit_SwiftUI._MapContentOutputs
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension _MapKit_SwiftUI.MapPolygon : _MapKit_SwiftUI.MapContent {
  public typealias Body = Swift.Never
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, *)
@available(watchOS, unavailable)
public struct MapScaleView : SwiftUI.View {
  public init(anchorEdge: SwiftUI.HorizontalEdge = .leading, scope: SwiftUI.Namespace.ID? = nil)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s15_MapKit_SwiftUI0A9ScaleViewV4bodyQrvp", 0) __
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct LookAroundPreview : SwiftUI.View {
  public init(initialScene: MapKit.MKLookAroundScene?, allowsNavigation: Swift.Bool = true, showsRoadLabels: Swift.Bool = true, pointsOfInterest: _MapKit_SwiftUI.PointOfInterestCategories = .all, badgePosition: MapKit.MKLookAroundBadgePosition = .topLeading)
  public init(scene: SwiftUI.Binding<MapKit.MKLookAroundScene?>, allowsNavigation: Swift.Bool = true, showsRoadLabels: Swift.Bool = true, pointsOfInterest: _MapKit_SwiftUI.PointOfInterestCategories = .all, badgePosition: MapKit.MKLookAroundBadgePosition = .topLeading)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s15_MapKit_SwiftUI17LookAroundPreviewV4bodyQrvp", 0) __
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
public struct MapFeature {
  public struct FeatureKind {
    public static var pointOfInterest: _MapKit_SwiftUI.MapFeature.FeatureKind {
      get
    }
    public static var territory: _MapKit_SwiftUI.MapFeature.FeatureKind {
      get
    }
    public static var physicalFeature: _MapKit_SwiftUI.MapFeature.FeatureKind {
      get
    }
  }
  public var coordinate: CoreLocation.CLLocationCoordinate2D {
    get
  }
  public var title: Swift.String? {
    get
  }
  public var kind: _MapKit_SwiftUI.MapFeature.FeatureKind {
    get
  }
  public var backgroundColor: SwiftUI.Color? {
    get
  }
  public var image: SwiftUI.Image? {
    get
  }
  public var pointOfInterestCategory: MapKit.MKPointOfInterestCategory? {
    get
  }
}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension _MapKit_SwiftUI.MapFeature : Swift.Equatable {
  public static func == (lhs: _MapKit_SwiftUI.MapFeature, rhs: _MapKit_SwiftUI.MapFeature) -> Swift.Bool
}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension _MapKit_SwiftUI.MapFeature : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  public func mapFeatureSelectionContent(@_MapKit_SwiftUI.MapContentBuilder content: @escaping (_MapKit_SwiftUI.MapFeature) -> some MapContent) -> some SwiftUI.View
  
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
public struct MapReader<Content> : SwiftUI.View where Content : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder content: @escaping (_MapKit_SwiftUI.MapProxy) -> Content)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s15_MapKit_SwiftUI0A6ReaderV4bodyQrvp", 0) __<Content>
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
public struct MapProxy {
  public func camera(framing region: MapKit.MKCoordinateRegion) -> _MapKit_SwiftUI.MapCamera
  public func camera(framing rect: MapKit.MKMapRect) -> _MapKit_SwiftUI.MapCamera
  public func camera(framing item: MapKit.MKMapItem, allowPitch: Swift.Bool = true) -> _MapKit_SwiftUI.MapCamera
  public func convert(_ point: CoreFoundation.CGPoint, from space: some CoordinateSpaceProtocol) -> CoreLocation.CLLocationCoordinate2D?
  public func convert(_ coordinate: CoreLocation.CLLocationCoordinate2D, to space: some CoordinateSpaceProtocol) -> CoreFoundation.CGPoint?
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
public struct MapCompass : SwiftUI.View {
  public init(scope: SwiftUI.Namespace.ID? = nil)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s15_MapKit_SwiftUI0A7CompassV4bodyQrvp", 0) __
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension _MapKit_SwiftUI.MapContent {
  public func tag<V>(_ tag: V) -> some _MapKit_SwiftUI.MapContent where V : Swift.Hashable
  
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
public struct Annotation<Label, Content> : _MapKit_SwiftUI.MapContent where Label : SwiftUI.View, Content : SwiftUI.View {
  public init(coordinate: CoreLocation.CLLocationCoordinate2D, anchor: SwiftUI.UnitPoint = .center, @SwiftUI.ViewBuilder content: () -> Content, @SwiftUI.ViewBuilder label: () -> Label)
  public init(_ titleKey: SwiftUI.LocalizedStringKey, coordinate: CoreLocation.CLLocationCoordinate2D, anchor: SwiftUI.UnitPoint = .center, @SwiftUI.ViewBuilder content: () -> Content) where Label == SwiftUI.Text
  public init<S>(_ title: S, coordinate: CoreLocation.CLLocationCoordinate2D, anchor: SwiftUI.UnitPoint = .center, @SwiftUI.ViewBuilder content: () -> Content) where Label == SwiftUI.Text, S : Swift.StringProtocol
  public static func _mapContentCount(inputs: _MapKit_SwiftUI._MapContentInputs) -> Swift.Int?
  public static func _makeMapContent(content: SwiftUI._GraphValue<_MapKit_SwiftUI.Annotation<Label, Content>>, inputs: _MapKit_SwiftUI._MapContentInputs) -> _MapKit_SwiftUI._MapContentOutputs
  public typealias Body = Swift.Never
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
@frozen public struct _ConditionalMapContent<TrueContent, FalseContent> {
  @usableFromInline
  @frozen internal enum Storage {
    case trueContent(TrueContent)
    case falseContent(FalseContent)
  }
  @usableFromInline
  internal let storage: _MapKit_SwiftUI._ConditionalMapContent<TrueContent, FalseContent>.Storage
  @usableFromInline
  internal init(trueContent: TrueContent, falseType: FalseContent.Type)
  @usableFromInline
  internal init(falseContent: FalseContent, trueType: TrueContent.Type)
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension _MapKit_SwiftUI._ConditionalMapContent : _MapKit_SwiftUI.MapContent where TrueContent : _MapKit_SwiftUI.MapContent, FalseContent : _MapKit_SwiftUI.MapContent {
  public static func _makeMapContent(content: SwiftUI._GraphValue<_MapKit_SwiftUI._ConditionalMapContent<TrueContent, FalseContent>>, inputs: _MapKit_SwiftUI._MapContentInputs) -> _MapKit_SwiftUI._MapContentOutputs
  public static func _mapContentCount(inputs: _MapKit_SwiftUI._MapContentInputs) -> Swift.Int?
  public typealias Body = Swift.Never
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension Swift.Optional : _MapKit_SwiftUI.MapContent where Wrapped : _MapKit_SwiftUI.MapContent {
  public static func _makeMapContent(content: SwiftUI._GraphValue<Swift.Optional<Wrapped>>, inputs: _MapKit_SwiftUI._MapContentInputs) -> _MapKit_SwiftUI._MapContentOutputs
  public typealias Body = Swift.Never
}
@available(iOS 14.0, tvOS 14.0, macOS 11.0, watchOS 7.0, *)
public struct _DefaultAnnotatedMapContent<Items> : SwiftUI.View where Items : Swift.RandomAccessCollection, Items.Element : Swift.Identifiable {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s15_MapKit_SwiftUI017_DefaultAnnotatedA7ContentV4bodyQrvp", 0) __<Items>
}
@available(iOS 14.0, tvOS 14.0, macOS 11.0, watchOS 7.0, *)
public struct _DefaultMapContent : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s15_MapKit_SwiftUI08_DefaultA7ContentV4bodyQrvp", 0) __
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
public protocol _MapContentModifier {
  associatedtype Body : _MapKit_SwiftUI._MapContentModifier
  var body: Self.Body { get }
  static func _makeMapContent(modifier: SwiftUI._GraphValue<Self>, inputs: _MapKit_SwiftUI._MapContentInputs, body: @escaping (_MapKit_SwiftUI._MapContentInputs) -> _MapKit_SwiftUI._MapContentOutputs) -> _MapKit_SwiftUI._MapContentOutputs
  static func _mapContentCount(inputs: _MapKit_SwiftUI._MapContentInputs, body: @escaping (_MapKit_SwiftUI._MapContentInputs) -> Swift.Int?) -> Swift.Int?
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension _MapKit_SwiftUI._MapContentModifier {
  public static func _makeMapContent(modifier: SwiftUI._GraphValue<Self>, inputs: _MapKit_SwiftUI._MapContentInputs, body: @escaping (_MapKit_SwiftUI._MapContentInputs) -> _MapKit_SwiftUI._MapContentOutputs) -> _MapKit_SwiftUI._MapContentOutputs
  public static func _mapContentCount(inputs: _MapKit_SwiftUI._MapContentInputs, body: @escaping (_MapKit_SwiftUI._MapContentInputs) -> Swift.Int?) -> Swift.Int?
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension Swift.Never : _MapKit_SwiftUI._MapContentModifier {
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension SwiftUI.ModifiedContent : _MapKit_SwiftUI.MapContent where Content : _MapKit_SwiftUI.MapContent, Modifier : _MapKit_SwiftUI._MapContentModifier {
  public static func _makeMapContent(content: SwiftUI._GraphValue<SwiftUI.ModifiedContent<Content, Modifier>>, inputs: _MapKit_SwiftUI._MapContentInputs) -> _MapKit_SwiftUI._MapContentOutputs
  public static func _mapContentCount(inputs: _MapKit_SwiftUI._MapContentInputs) -> Swift.Int?
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension _MapKit_SwiftUI.MapContent {
  @usableFromInline
  internal func modifier<M>(_ modifier: M) -> SwiftUI.ModifiedContent<Self, M> where M : _MapKit_SwiftUI._MapContentModifier
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension SwiftUI.ModifiedContent : _MapKit_SwiftUI.DynamicMapContent where Content : _MapKit_SwiftUI.DynamicMapContent, Modifier : _MapKit_SwiftUI._MapContentModifier {
  public var data: Content.Data {
    get
  }
  public typealias Data = Content.Data
}
@available(macOS 14.0, macCatalyst 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct MapZoomStepper : SwiftUI.View {
  public init(scope: SwiftUI.Namespace.ID? = nil)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s15_MapKit_SwiftUI0A11ZoomStepperV4bodyQrvp", 0) __
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
public struct MapCamera : Swift.Equatable {
  public var centerCoordinate: CoreLocation.CLLocationCoordinate2D
  public var distance: Swift.Double
  public var heading: Swift.Double
  public var pitch: Swift.Double
  public static func == (lhs: _MapKit_SwiftUI.MapCamera, rhs: _MapKit_SwiftUI.MapCamera) -> Swift.Bool
  public init(centerCoordinate: CoreLocation.CLLocationCoordinate2D, distance: Swift.Double, heading: Swift.Double = 0, pitch: Swift.Double = 0)
  @available(watchOS, unavailable)
  public init(_ camera: MapKit.MKMapCamera)
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
public struct MapCameraBounds {
  public init(centerCoordinateBounds: MapKit.MKCoordinateRegion, minimumDistance: Swift.Double? = nil, maximumDistance: Swift.Double? = nil)
  public init(centerCoordinateBounds: MapKit.MKMapRect, minimumDistance: Swift.Double? = nil, maximumDistance: Swift.Double? = nil)
  public init(minimumDistance: Swift.Double? = nil, maximumDistance: Swift.Double? = nil)
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
public struct MapCameraPosition : Swift.Equatable {
  public static var automatic: _MapKit_SwiftUI.MapCameraPosition {
    get
  }
  public static func camera(_ camera: _MapKit_SwiftUI.MapCamera) -> _MapKit_SwiftUI.MapCameraPosition
  public static func region(_ region: MapKit.MKCoordinateRegion) -> _MapKit_SwiftUI.MapCameraPosition
  public static func rect(_ rect: MapKit.MKMapRect) -> _MapKit_SwiftUI.MapCameraPosition
  public static func item(_ item: MapKit.MKMapItem, allowsAutomaticPitch: Swift.Bool = true) -> _MapKit_SwiftUI.MapCameraPosition
  public static func userLocation(followsHeading: Swift.Bool = false, fallback: _MapKit_SwiftUI.MapCameraPosition) -> _MapKit_SwiftUI.MapCameraPosition
  public var camera: _MapKit_SwiftUI.MapCamera? {
    get
  }
  public var region: MapKit.MKCoordinateRegion? {
    get
  }
  public var rect: MapKit.MKMapRect? {
    get
  }
  public var item: MapKit.MKMapItem? {
    get
  }
  public var positionedByUser: Swift.Bool {
    get
  }
  public var followsUserLocation: Swift.Bool {
    get
  }
  public var followsUserHeading: Swift.Bool {
    get
  }
  public var fallbackPosition: _MapKit_SwiftUI.MapCameraPosition? {
    get
  }
  public var allowsAutomaticPitch: Swift.Bool {
    get
  }
  public static func == (a: _MapKit_SwiftUI.MapCameraPosition, b: _MapKit_SwiftUI.MapCameraPosition) -> Swift.Bool
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
public struct MapStyle {
  public struct Elevation {
    public static var automatic: _MapKit_SwiftUI.MapStyle.Elevation {
      get
    }
    public static var flat: _MapKit_SwiftUI.MapStyle.Elevation {
      get
    }
    public static var realistic: _MapKit_SwiftUI.MapStyle.Elevation {
      get
    }
  }
  public struct StandardEmphasis {
    public static var automatic: _MapKit_SwiftUI.MapStyle.StandardEmphasis {
      get
    }
    public static var muted: _MapKit_SwiftUI.MapStyle.StandardEmphasis {
      get
    }
  }
  public static var standard: _MapKit_SwiftUI.MapStyle {
    get
  }
  public static var imagery: _MapKit_SwiftUI.MapStyle {
    get
  }
  public static var hybrid: _MapKit_SwiftUI.MapStyle {
    get
  }
  public static func standard(elevation: _MapKit_SwiftUI.MapStyle.Elevation = .automatic, emphasis: _MapKit_SwiftUI.MapStyle.StandardEmphasis = .automatic, pointsOfInterest: _MapKit_SwiftUI.PointOfInterestCategories = .all, showsTraffic: Swift.Bool = false) -> _MapKit_SwiftUI.MapStyle
  public static func imagery(elevation: _MapKit_SwiftUI.MapStyle.Elevation = .automatic) -> _MapKit_SwiftUI.MapStyle
  public static func hybrid(elevation: _MapKit_SwiftUI.MapStyle.Elevation = .automatic, pointsOfInterest: _MapKit_SwiftUI.PointOfInterestCategories = .all, showsTraffic: Swift.Bool = false) -> _MapKit_SwiftUI.MapStyle
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension SwiftUI.View {
  public func mapStyle(_ value: _MapKit_SwiftUI.MapStyle) -> some SwiftUI.View
  
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
public protocol MapSelectable : Swift.Hashable {
  var feature: _MapKit_SwiftUI.MapFeature? { get }
  init(_ feature: _MapKit_SwiftUI.MapFeature?)
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension Swift.Never : _MapKit_SwiftUI.MapSelectable {
  public var feature: _MapKit_SwiftUI.MapFeature? {
    get
    set
  }
  public init(_ feature: _MapKit_SwiftUI.MapFeature?)
}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  public func mapFeatureSelectionDisabled(_ selectionDisabled: @escaping (_MapKit_SwiftUI.MapFeature) -> Swift.Bool) -> some SwiftUI.View
  
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
public struct MapCircle {
  public init(center coordinate: CoreLocation.CLLocationCoordinate2D, radius: CoreLocation.CLLocationDistance)
  public init(mapRect: MapKit.MKMapRect)
  @available(watchOS, unavailable)
  public init(_ circle: MapKit.MKCircle)
  public static func _mapContentCount(inputs: _MapKit_SwiftUI._MapContentInputs) -> Swift.Int?
  public static func _makeMapContent(content: SwiftUI._GraphValue<_MapKit_SwiftUI.MapCircle>, inputs: _MapKit_SwiftUI._MapContentInputs) -> _MapKit_SwiftUI._MapContentOutputs
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension _MapKit_SwiftUI.MapCircle : _MapKit_SwiftUI.MapContent {
  public typealias Body = Swift.Never
}
@available(iOS 14.0, tvOS 14.0, macOS 11.0, watchOS 7.0, *)
public struct MapInteractionModes : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let pan: _MapKit_SwiftUI.MapInteractionModes
  public static let zoom: _MapKit_SwiftUI.MapInteractionModes
  public static let all: _MapKit_SwiftUI.MapInteractionModes
  public typealias ArrayLiteralElement = _MapKit_SwiftUI.MapInteractionModes
  public typealias Element = _MapKit_SwiftUI.MapInteractionModes
  public typealias RawValue = Swift.Int
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension _MapKit_SwiftUI.MapInteractionModes {
  public static let rotate: _MapKit_SwiftUI.MapInteractionModes
  public static let pitch: _MapKit_SwiftUI.MapInteractionModes
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
@frozen public struct TupleMapContent<T> : _MapKit_SwiftUI.MapContent {
  public var value: T
  @inlinable internal init(_ value: T) { self.value = value }
  public static func _makeMapContent(content: SwiftUI._GraphValue<_MapKit_SwiftUI.TupleMapContent<T>>, inputs: _MapKit_SwiftUI._MapContentInputs) -> _MapKit_SwiftUI._MapContentOutputs
  public static func _mapContentCount(inputs: _MapKit_SwiftUI._MapContentInputs) -> Swift.Int?
  public typealias Body = Swift.Never
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
public struct MapUserLocationButton : SwiftUI.View {
  public init(scope: SwiftUI.Namespace.ID? = nil)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s15_MapKit_SwiftUI0A18UserLocationButtonV4bodyQrvp", 0) __
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
public struct MapPolyline {
  public struct ContourStyle {
    public static var straight: _MapKit_SwiftUI.MapPolyline.ContourStyle {
      get
    }
    public static var geodesic: _MapKit_SwiftUI.MapPolyline.ContourStyle {
      get
    }
  }
  public init(coordinates: [CoreLocation.CLLocationCoordinate2D], contourStyle: _MapKit_SwiftUI.MapPolyline.ContourStyle = .straight)
  public init(points: [MapKit.MKMapPoint], contourStyle: _MapKit_SwiftUI.MapPolyline.ContourStyle = .straight)
  @available(watchOS, unavailable)
  public init(_ polyline: MapKit.MKPolyline)
  @available(watchOS, unavailable)
  public init(_ route: MapKit.MKRoute)
  public static func _mapContentCount(inputs: _MapKit_SwiftUI._MapContentInputs) -> Swift.Int?
  public static func _makeMapContent(content: SwiftUI._GraphValue<_MapKit_SwiftUI.MapPolyline>, inputs: _MapKit_SwiftUI._MapContentInputs) -> _MapKit_SwiftUI._MapContentOutputs
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension _MapKit_SwiftUI.MapPolyline : _MapKit_SwiftUI.MapContent {
  public typealias Body = Swift.Never
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension _MapKit_SwiftUI.MapContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1>(_ c0: C0, _ c1: C1) -> _MapKit_SwiftUI.TupleMapContent<(C0, C1)> where C0 : _MapKit_SwiftUI.MapContent, C1 : _MapKit_SwiftUI.MapContent {
        return .init((c0, c1))
    }
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension _MapKit_SwiftUI.MapContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2>(_ c0: C0, _ c1: C1, _ c2: C2) -> _MapKit_SwiftUI.TupleMapContent<(C0, C1, C2)> where C0 : _MapKit_SwiftUI.MapContent, C1 : _MapKit_SwiftUI.MapContent, C2 : _MapKit_SwiftUI.MapContent {
        return .init((c0, c1, c2))
    }
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension _MapKit_SwiftUI.MapContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> _MapKit_SwiftUI.TupleMapContent<(C0, C1, C2, C3)> where C0 : _MapKit_SwiftUI.MapContent, C1 : _MapKit_SwiftUI.MapContent, C2 : _MapKit_SwiftUI.MapContent, C3 : _MapKit_SwiftUI.MapContent {
        return .init((c0, c1, c2, c3))
    }
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension _MapKit_SwiftUI.MapContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> _MapKit_SwiftUI.TupleMapContent<(C0, C1, C2, C3, C4)> where C0 : _MapKit_SwiftUI.MapContent, C1 : _MapKit_SwiftUI.MapContent, C2 : _MapKit_SwiftUI.MapContent, C3 : _MapKit_SwiftUI.MapContent, C4 : _MapKit_SwiftUI.MapContent {
        return .init((c0, c1, c2, c3, c4))
    }
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension _MapKit_SwiftUI.MapContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> _MapKit_SwiftUI.TupleMapContent<(C0, C1, C2, C3, C4, C5)> where C0 : _MapKit_SwiftUI.MapContent, C1 : _MapKit_SwiftUI.MapContent, C2 : _MapKit_SwiftUI.MapContent, C3 : _MapKit_SwiftUI.MapContent, C4 : _MapKit_SwiftUI.MapContent, C5 : _MapKit_SwiftUI.MapContent {
        return .init((c0, c1, c2, c3, c4, c5))
    }
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension _MapKit_SwiftUI.MapContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> _MapKit_SwiftUI.TupleMapContent<(C0, C1, C2, C3, C4, C5, C6)> where C0 : _MapKit_SwiftUI.MapContent, C1 : _MapKit_SwiftUI.MapContent, C2 : _MapKit_SwiftUI.MapContent, C3 : _MapKit_SwiftUI.MapContent, C4 : _MapKit_SwiftUI.MapContent, C5 : _MapKit_SwiftUI.MapContent, C6 : _MapKit_SwiftUI.MapContent {
        return .init((c0, c1, c2, c3, c4, c5, c6))
    }
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension _MapKit_SwiftUI.MapContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> _MapKit_SwiftUI.TupleMapContent<(C0, C1, C2, C3, C4, C5, C6, C7)> where C0 : _MapKit_SwiftUI.MapContent, C1 : _MapKit_SwiftUI.MapContent, C2 : _MapKit_SwiftUI.MapContent, C3 : _MapKit_SwiftUI.MapContent, C4 : _MapKit_SwiftUI.MapContent, C5 : _MapKit_SwiftUI.MapContent, C6 : _MapKit_SwiftUI.MapContent, C7 : _MapKit_SwiftUI.MapContent {
        return .init((c0, c1, c2, c3, c4, c5, c6, c7))
    }
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension _MapKit_SwiftUI.MapContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> _MapKit_SwiftUI.TupleMapContent<(C0, C1, C2, C3, C4, C5, C6, C7, C8)> where C0 : _MapKit_SwiftUI.MapContent, C1 : _MapKit_SwiftUI.MapContent, C2 : _MapKit_SwiftUI.MapContent, C3 : _MapKit_SwiftUI.MapContent, C4 : _MapKit_SwiftUI.MapContent, C5 : _MapKit_SwiftUI.MapContent, C6 : _MapKit_SwiftUI.MapContent, C7 : _MapKit_SwiftUI.MapContent, C8 : _MapKit_SwiftUI.MapContent {
        return .init((c0, c1, c2, c3, c4, c5, c6, c7, c8))
    }
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension _MapKit_SwiftUI.MapContentBuilder {
  @_alwaysEmitIntoClient public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> _MapKit_SwiftUI.TupleMapContent<(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)> where C0 : _MapKit_SwiftUI.MapContent, C1 : _MapKit_SwiftUI.MapContent, C2 : _MapKit_SwiftUI.MapContent, C3 : _MapKit_SwiftUI.MapContent, C4 : _MapKit_SwiftUI.MapContent, C5 : _MapKit_SwiftUI.MapContent, C6 : _MapKit_SwiftUI.MapContent, C7 : _MapKit_SwiftUI.MapContent, C8 : _MapKit_SwiftUI.MapContent, C9 : _MapKit_SwiftUI.MapContent {
        return .init((c0, c1, c2, c3, c4, c5, c6, c7, c8, c9))
    }
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension SwiftUI.View {
  public func mapControls(@SwiftUI.ViewBuilder _ content: () -> some View) -> some SwiftUI.View
  
  public func mapControlVisibility(_ visibility: SwiftUI.Visibility) -> some SwiftUI.View
  
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension CoreLocation.CLLocationCoordinate2D : SwiftUI.Animatable {
  public var animatableData: SwiftUI.AnimatablePair<CoreLocation.CLLocationDegrees, CoreLocation.CLLocationDegrees> {
    get
    set
  }
  public typealias AnimatableData = SwiftUI.AnimatablePair<CoreLocation.CLLocationDegrees, CoreLocation.CLLocationDegrees>
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension SwiftUI.View {
  public func mapScope(_ scope: SwiftUI.Namespace.ID) -> some SwiftUI.View
  
}
@available(iOS 17.0, macOS 14.0, watchOS 10.0, tvOS 17.0, *)
extension _MapKit_SwiftUI.MapContent {
  public func stroke(_ content: some ShapeStyle, lineWidth: CoreFoundation.CGFloat = 1) -> some _MapKit_SwiftUI.MapContent
  
  public func stroke(lineWidth: CoreFoundation.CGFloat = 1) -> some _MapKit_SwiftUI.MapContent
  
  public func stroke(_ content: some ShapeStyle, style: SwiftUI.StrokeStyle) -> some _MapKit_SwiftUI.MapContent
  
  public func strokeStyle(style: SwiftUI.StrokeStyle) -> some _MapKit_SwiftUI.MapContent
  
  public func foregroundStyle(_ content: some ShapeStyle) -> some _MapKit_SwiftUI.MapContent
  
  public func mapOverlayLevel(level: MapKit.MKOverlayLevel) -> some _MapKit_SwiftUI.MapContent
  
}
@available(iOS 17.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.View {
  public func lookAroundViewer(isPresented: SwiftUI.Binding<Swift.Bool>, initialScene: MapKit.MKLookAroundScene?, allowsNavigation: Swift.Bool = true, showsRoadLabels: Swift.Bool = true, pointsOfInterest: _MapKit_SwiftUI.PointOfInterestCategories = .all, onDismiss: (() -> Swift.Void)? = nil) -> some SwiftUI.View
  
  public func lookAroundViewer(isPresented: SwiftUI.Binding<Swift.Bool>, scene: SwiftUI.Binding<MapKit.MKLookAroundScene?>, allowsNavigation: Swift.Bool = true, showsRoadLabels: Swift.Bool = true, pointsOfInterest: _MapKit_SwiftUI.PointOfInterestCategories = .all, onDismiss: (() -> Swift.Void)? = nil) -> some SwiftUI.View
  
}
@available(watchOS 10.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(macOS, unavailable)
public struct MapLocationCompass : SwiftUI.View {
  public init(scope: SwiftUI.Namespace.ID? = nil)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s15_MapKit_SwiftUI0A15LocationCompassV4bodyQrvp", 0) __
}
@available(iOS, introduced: 14.0, deprecated: 17.0, message: "Use Map initializers that take a `position` parameter along with\nMapCameraPosition.userLocation to configure the user location\ntracking behavior.")
@available(macOS, introduced: 11.0, deprecated: 14.0, message: "Use Map initializers that take a `position` parameter along with\nMapCameraPosition.userLocation to configure the user location\ntracking behavior.")
@available(tvOS, introduced: 14.0, deprecated: 17.0, message: "Use Map initializers that take a `position` parameter along with\nMapCameraPosition.userLocation to configure the user location\ntracking behavior.")
@available(watchOS, introduced: 7.0, deprecated: 10.0, message: "Use Map initializers that take a `position` parameter along with\nMapCameraPosition.userLocation to configure the user location\ntracking behavior.")
extension _MapKit_SwiftUI.MapUserTrackingMode : Swift.Equatable {}
@available(iOS, introduced: 14.0, deprecated: 17.0, message: "Use Map initializers that take a `position` parameter along with\nMapCameraPosition.userLocation to configure the user location\ntracking behavior.")
@available(macOS, introduced: 11.0, deprecated: 14.0, message: "Use Map initializers that take a `position` parameter along with\nMapCameraPosition.userLocation to configure the user location\ntracking behavior.")
@available(tvOS, introduced: 14.0, deprecated: 17.0, message: "Use Map initializers that take a `position` parameter along with\nMapCameraPosition.userLocation to configure the user location\ntracking behavior.")
@available(watchOS, introduced: 7.0, deprecated: 10.0, message: "Use Map initializers that take a `position` parameter along with\nMapCameraPosition.userLocation to configure the user location\ntracking behavior.")
extension _MapKit_SwiftUI.MapUserTrackingMode : Swift.Hashable {}

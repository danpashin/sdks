// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.12.5 clang-1500.3.9.1.1)
// swift-module-flags: -target arm64-apple-ios17.4 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-bare-slash-regex -user-module-version 511.41.2 -module-name VideoSubscriberAccount
import DeveloperToolsSupport
import Foundation
import Swift
@_exported import VideoSubscriberAccount
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(iOS 17.4, tvOS 17.4, macOS 14.4, visionOS 1.1, *)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
public struct VSAppleSubscription : Swift.Sendable, Swift.Hashable {
  public init(customerID: Swift.String, productCodes: [Swift.String])
  public var customerID: Swift.String {
    get
    set
  }
  public var productCodes: [Swift.String] {
    get
    set
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: VideoSubscriberAccount.VSAppleSubscription, b: VideoSubscriberAccount.VSAppleSubscription) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 16.4, tvOS 16.4, macOS 13.3, *)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
public struct VSUserAccount : Swift.Sendable, Swift.Hashable {
  public var updateURL: Foundation.URL? {
    get
    set
  }
  public var requiresSystemTrust: Swift.Bool {
    get
    set
  }
  public var accountProviderIdentifier: Swift.String? {
    get
    set
  }
  public var identifier: Swift.String? {
    get
    set
  }
  public var accountType: VideoSubscriberAccount.VSUserAccount.AccountType {
    get
    set
  }
  public var isSignedOut: Swift.Bool {
    get
    set
  }
  public var subscriptionBillingCycleEndDate: Foundation.Date? {
    get
    set
  }
  public var tierIdentifiers: [Swift.String]? {
    get
    set
  }
  public var billingIdentifier: Swift.String? {
    get
    set
  }
  public var authenticationData: Swift.String? {
    get
    set
  }
  @available(iOS 17.4, tvOS 17.4, macOS 14.4, visionOS 1.1, *)
  @available(watchOS, unavailable)
  @available(macCatalyst, unavailable)
  public var appleSubscription: VideoSubscriberAccount.VSAppleSubscription?
  public var isFromCurrentDevice: Swift.Bool {
    get
    set
  }
  public var deviceCategory: VideoSubscriberAccount.VSUserAccount.OriginatingDeviceCategory {
    get
  }
  public init(accountType: VideoSubscriberAccount.VSUserAccount.AccountType = .free, updateURL: Foundation.URL?)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: VideoSubscriberAccount.VSUserAccount, b: VideoSubscriberAccount.VSUserAccount) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 16.4, tvOS 16.4, macOS 13.3, *)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
extension VideoSubscriberAccount.VSUserAccount {
  public enum AccountType : Swift.Int, Swift.Sendable {
    case free
    case paid
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum OriginatingDeviceCategory : Swift.Int, Swift.Sendable {
    case mobile
    case other
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
@available(iOS 16.4, tvOS 16.4, macOS 13.3, *)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
extension VideoSubscriberAccount.VSUserAccountManager {
  #if compiler(>=5.3) && $AsyncAwait
  public func update(_ account: VideoSubscriberAccount.VSUserAccount) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func userAccounts(options: VideoSubscriberAccount.VSUserAccountManager.QueryOptions = []) async throws -> [VideoSubscriberAccount.VSUserAccount]
  #endif
}
@available(iOS 16.4, tvOS 16.4, macOS 13.3, *)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
extension VideoSubscriberAccount.VSUserAccount.AccountType : Swift.Equatable {}
@available(iOS 16.4, tvOS 16.4, macOS 13.3, *)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
extension VideoSubscriberAccount.VSUserAccount.AccountType : Swift.Hashable {}
@available(iOS 16.4, tvOS 16.4, macOS 13.3, *)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
extension VideoSubscriberAccount.VSUserAccount.AccountType : Swift.RawRepresentable {}
@available(iOS 16.4, tvOS 16.4, macOS 13.3, *)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
extension VideoSubscriberAccount.VSUserAccount.OriginatingDeviceCategory : Swift.Equatable {}
@available(iOS 16.4, tvOS 16.4, macOS 13.3, *)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
extension VideoSubscriberAccount.VSUserAccount.OriginatingDeviceCategory : Swift.Hashable {}
@available(iOS 16.4, tvOS 16.4, macOS 13.3, *)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
extension VideoSubscriberAccount.VSUserAccount.OriginatingDeviceCategory : Swift.RawRepresentable {}

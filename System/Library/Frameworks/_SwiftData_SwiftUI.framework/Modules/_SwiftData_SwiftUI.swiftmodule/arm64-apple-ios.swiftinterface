// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.11 clang-1500.1.0.2.2)
// swift-module-flags: -target arm64-apple-ios17.2 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -module-name _SwiftData_SwiftUI
// swift-module-flags-ignorable: -enable-experimental-feature VariadicGenerics -enable-experimental-feature ExtensionMacros -target-min-inlining-version min -enable-bare-slash-regex -user-module-version 45
import Foundation
@_exported import Observation
import Swift
@_exported import SwiftData
import SwiftUI
import UniformTypeIdentifiers
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
extension SwiftData.ModelContext {
  public var debugDescription: Swift.String {
    get
  }
}
extension SwiftUI.AppStorage {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public init(wrappedValue: Value, _ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == SwiftData.PersistentIdentifier
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public init(_ key: Swift.String, store: Foundation.UserDefaults? = nil) where Value == SwiftData.PersistentIdentifier?
}
extension SwiftUI.SceneStorage {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public init(wrappedValue: Value, _ key: Swift.String) where Value == SwiftData.PersistentIdentifier
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public init(_ key: Swift.String) where Value == SwiftData.PersistentIdentifier?
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.View {
  public func modelContext(_ modelContext: SwiftData.ModelContext) -> some SwiftUI.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Scene {
  public func modelContext(_ modelContext: SwiftData.ModelContext) -> some SwiftUI.Scene
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
public struct Query<Element, Result> : SwiftUI.DynamicProperty where Element : SwiftData.PersistentModel {
  public var modelContext: SwiftData.ModelContext {
    get
  }
  public var fetchError: (any Swift.Error)? {
    get
  }
  public var wrappedValue: Result {
    get
  }
  public func update()
  public static var _propertyBehaviors: Swift.UInt32 {
    get
  }
  #if compiler(>=5.3) && $ParameterPacks
  public init<Value>(filter: Foundation.Predicate<Element>? = nil, sort keyPath: Swift.KeyPath<Element, Value>, order: Foundation.SortOrder = .forward, animation: SwiftUI.Animation) where Result == [Element], Value : Swift.Comparable
  #endif
  #if compiler(>=5.3) && $ParameterPacks
  public init<Value>(filter: Foundation.Predicate<Element>? = nil, sort keyPath: Swift.KeyPath<Element, Value?>, order: Foundation.SortOrder = .forward, animation: SwiftUI.Animation) where Result == [Element], Value : Swift.Comparable
  #endif
  #if compiler(>=5.3) && $ParameterPacks
  public init<Value>(filter: Foundation.Predicate<Element>? = nil, sort keyPath: Swift.KeyPath<Element, Value>, order: Foundation.SortOrder = .forward, transaction: SwiftUI.Transaction? = nil) where Result == [Element], Value : Swift.Comparable
  #endif
  #if compiler(>=5.3) && $ParameterPacks
  public init<Value>(filter: Foundation.Predicate<Element>? = nil, sort keyPath: Swift.KeyPath<Element, Value?>, order: Foundation.SortOrder = .forward, transaction: SwiftUI.Transaction? = nil) where Result == [Element], Value : Swift.Comparable
  #endif
  #if compiler(>=5.3) && $ParameterPacks
  public init(filter: Foundation.Predicate<Element>? = nil, sort descriptors: [Foundation.SortDescriptor<Element>] = [], animation: SwiftUI.Animation) where Result == [Element]
  #endif
  #if compiler(>=5.3) && $ParameterPacks
  public init(filter: Foundation.Predicate<Element>? = nil, sort descriptors: [Foundation.SortDescriptor<Element>] = [], transaction: SwiftUI.Transaction? = nil) where Result == [Element]
  #endif
  public init(_ descriptor: SwiftData.FetchDescriptor<Element>, transaction: SwiftUI.Transaction? = nil) where Result == [Element]
  public init(_ descriptor: SwiftData.FetchDescriptor<Element>, animation: SwiftUI.Animation) where Result == [Element]
}
@available(*, unavailable)
extension _SwiftData_SwiftUI.Query : Swift.Sendable {
}
#if compiler(>=5.3) && $Macros && $AttachedMacros
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@attached(accessor) @attached(peer, names: prefixed(`_`)) public macro Query() = #externalMacro(module: "SwiftDataMacros", type: "QueryMacro")
#endif
#if compiler(>=5.3) && $Macros && $AttachedMacros && $ParameterPacks
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@attached(accessor) @attached(peer, names: prefixed(`_`)) public macro Query<Value, Element>(filter: Foundation.Predicate<Element>? = nil, sort keyPath: Swift.KeyPath<Element, Value>, order: Foundation.SortOrder = .forward, transaction: SwiftUI.Transaction? = nil) = #externalMacro(module: "SwiftDataMacros", type: "QueryMacro") where Value : Swift.Comparable, Element : SwiftData.PersistentModel
#endif
#if compiler(>=5.3) && $Macros && $AttachedMacros && $ParameterPacks
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@attached(accessor) @attached(peer, names: prefixed(`_`)) public macro Query<Value, Element>(filter: Foundation.Predicate<Element>? = nil, sort keyPath: Swift.KeyPath<Element, Value?>, order: Foundation.SortOrder = .forward, transaction: SwiftUI.Transaction? = nil) = #externalMacro(module: "SwiftDataMacros", type: "QueryMacro") where Value : Swift.Comparable, Element : SwiftData.PersistentModel
#endif
#if compiler(>=5.3) && $Macros && $AttachedMacros && $ParameterPacks
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@attached(accessor) @attached(peer, names: prefixed(`_`)) public macro Query<Element>(filter: Foundation.Predicate<Element>? = nil, sort descriptors: [Foundation.SortDescriptor<Element>] = [], animation: SwiftUI.Animation) = #externalMacro(module: "SwiftDataMacros", type: "QueryMacro") where Element : SwiftData.PersistentModel
#endif
#if compiler(>=5.3) && $Macros && $AttachedMacros && $ParameterPacks
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@attached(accessor) @attached(peer, names: prefixed(`_`)) public macro Query<Value, Element>(filter: Foundation.Predicate<Element>? = nil, sort keyPath: Swift.KeyPath<Element, Value>, order: Foundation.SortOrder = .forward, animation: SwiftUI.Animation) = #externalMacro(module: "SwiftDataMacros", type: "QueryMacro") where Value : Swift.Comparable, Element : SwiftData.PersistentModel
#endif
#if compiler(>=5.3) && $Macros && $AttachedMacros && $ParameterPacks
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@attached(accessor) @attached(peer, names: prefixed(`_`)) public macro Query<Value, Element>(filter: Foundation.Predicate<Element>? = nil, sort keyPath: Swift.KeyPath<Element, Value?>, order: Foundation.SortOrder = .forward, animation: SwiftUI.Animation) = #externalMacro(module: "SwiftDataMacros", type: "QueryMacro") where Value : Swift.Comparable, Element : SwiftData.PersistentModel
#endif
#if compiler(>=5.3) && $Macros && $AttachedMacros && $ParameterPacks
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@attached(accessor) @attached(peer, names: prefixed(`_`)) public macro Query<Element>(filter: Foundation.Predicate<Element>? = nil, sort descriptors: [Foundation.SortDescriptor<Element>] = [], transaction: SwiftUI.Transaction? = nil) = #externalMacro(module: "SwiftDataMacros", type: "QueryMacro") where Element : SwiftData.PersistentModel
#endif
#if compiler(>=5.3) && $Macros && $AttachedMacros
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@attached(accessor) @attached(peer, names: prefixed(`_`)) public macro Query<Element>(_ descriptor: SwiftData.FetchDescriptor<Element>, transaction: SwiftUI.Transaction? = nil) = #externalMacro(module: "SwiftDataMacros", type: "QueryMacro") where Element : SwiftData.PersistentModel
#endif
#if compiler(>=5.3) && $Macros && $AttachedMacros
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@attached(accessor) @attached(peer, names: prefixed(`_`)) public macro Query<Element>(_ descriptor: SwiftData.FetchDescriptor<Element>, animation: SwiftUI.Animation) = #externalMacro(module: "SwiftDataMacros", type: "QueryMacro") where Element : SwiftData.PersistentModel
#endif
#if compiler(>=5.3) && $Macros && $AttachedMacros
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@attached(accessor) @attached(peer, names: prefixed(`_`)) public macro Query(animation: SwiftUI.Animation) = #externalMacro(module: "SwiftDataMacros", type: "QueryMacro")
#endif
#if compiler(>=5.3) && $Macros && $AttachedMacros
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
@attached(accessor) @attached(peer, names: prefixed(`_`)) public macro Query(transaction: SwiftUI.Transaction) = #externalMacro(module: "SwiftDataMacros", type: "QueryMacro")
#endif
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.View {
  public func modelContainer(for modelType: any SwiftData.PersistentModel.Type, inMemory: Swift.Bool = false, isAutosaveEnabled: Swift.Bool = true, isUndoEnabled: Swift.Bool = false, onSetup: @escaping (Swift.Result<SwiftData.ModelContainer, any Swift.Error>) -> Swift.Void = { _ in }) -> some SwiftUI.View
  
  public func modelContainer(for modelTypes: [any SwiftData.PersistentModel.Type], inMemory: Swift.Bool = false, isAutosaveEnabled: Swift.Bool = true, isUndoEnabled: Swift.Bool = false, onSetup: @escaping (Swift.Result<SwiftData.ModelContainer, any Swift.Error>) -> Swift.Void = { _ in }) -> some SwiftUI.View
  
  public func modelContainer(_ container: SwiftData.ModelContainer) -> some SwiftUI.View
  
}
@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
extension SwiftUI.Scene {
  public func modelContainer(for modelType: any SwiftData.PersistentModel.Type, inMemory: Swift.Bool = false, isAutosaveEnabled: Swift.Bool = true, isUndoEnabled: Swift.Bool = false, onSetup: @escaping (Swift.Result<SwiftData.ModelContainer, any Swift.Error>) -> Swift.Void = { _ in }) -> some SwiftUI.Scene
  
  public func modelContainer(for modelTypes: [any SwiftData.PersistentModel.Type], inMemory: Swift.Bool = false, isAutosaveEnabled: Swift.Bool = true, isUndoEnabled: Swift.Bool = false, onSetup: @escaping (Swift.Result<SwiftData.ModelContainer, any Swift.Error>) -> Swift.Void = { _ in }) -> some SwiftUI.Scene
  
  public func modelContainer(_ container: SwiftData.ModelContainer) -> some SwiftUI.Scene
  
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.DocumentGroup where Document == _SwiftData_SwiftUI.ModelDocument {
  public init(editing contentType: UniformTypeIdentifiers.UTType, migrationPlan: any SwiftData.SchemaMigrationPlan.Type, editor: @escaping () -> Content, prepareDocument: @escaping ((SwiftData.ModelContext) -> Swift.Void) = { _ in })
  public init(viewing contentType: UniformTypeIdentifiers.UTType, migrationPlan: any SwiftData.SchemaMigrationPlan.Type, viewer: @escaping () -> Content)
  public init(editing modelType: any SwiftData.PersistentModel.Type, contentType: UniformTypeIdentifiers.UTType, editor: @escaping () -> Content, prepareDocument: @escaping ((SwiftData.ModelContext) -> Swift.Void) = { _ in })
  public init(editing modelTypes: [any SwiftData.PersistentModel.Type], contentType: UniformTypeIdentifiers.UTType, editor: @escaping () -> Content, prepareDocument: @escaping ((SwiftData.ModelContext) -> Swift.Void) = { _ in })
  public init(viewing modelType: any SwiftData.PersistentModel.Type, contentType: UniformTypeIdentifiers.UTType, viewer: @escaping () -> Content)
  public init(viewing modelTypes: [any SwiftData.PersistentModel.Type], contentType: UniformTypeIdentifiers.UTType, viewer: @escaping () -> Content)
}
@available(iOS 17.0, macOS 14.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ModelDocument {
}
@available(*, unavailable)
extension _SwiftData_SwiftUI.ModelDocument : Swift.Sendable {
}
@available(macOS 14.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension SwiftUI.NewDocumentAction {
  public func callAsFunction(contentType: UniformTypeIdentifiers.UTType, prepareDocument: @escaping (SwiftData.ModelContext) -> Swift.Void)
}
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
@usableFromInline
internal enum Log {
}
extension SwiftUI.EnvironmentValues {
  @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)
  public var modelContext: SwiftData.ModelContext {
    get
    set
  }
}

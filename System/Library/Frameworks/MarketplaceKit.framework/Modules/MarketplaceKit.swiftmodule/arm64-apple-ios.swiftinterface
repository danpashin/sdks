// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.12.5 clang-1500.3.9.1.1)
// swift-module-flags: -target arm64-apple-ios17.4 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -package-name ManagedAppDistribution -enable-upcoming-feature ConciseMagicFile -enable-upcoming-feature ForwardTrailingClosures -enable-bare-slash-regex -user-module-version 1.4.81.9.5 -module-name MarketplaceKit
import CoreGraphics
import ExtensionFoundation
import Foundation
import LocalAuthentication
import Observation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(iOS 17.4, *)
public protocol MarketplaceExtensionConfiguration : ExtensionFoundation.AppExtensionConfiguration {
}
@available(iOS 17.4, *)
public struct AppVersion : Swift.Sendable, Swift.CustomStringConvertible {
  public let appleItemID: MarketplaceKit.AppleItemID
  public let appleVersionID: Swift.UInt64
  public init(appleItemID: MarketplaceKit.AppleItemID, appleVersionID: Swift.UInt64)
  public var description: Swift.String {
    get
  }
}
@available(iOS 17.4, *)
public struct AutomaticUpdate : Swift.Sendable {
  public let appleItemID: MarketplaceKit.AppleItemID
  public let alternativeDistributionPackage: Foundation.URL
  public let account: Swift.String
  public let installVerificationToken: Swift.String
  public init(appleItemID: MarketplaceKit.AppleItemID, alternativeDistributionPackage: Foundation.URL, account: Swift.String, installVerificationToken: Swift.String)
}
@available(iOS 17.4, *)
public protocol MarketplaceExtension : ExtensionFoundation.AppExtension, Swift.Sendable {
  func additionalHeaders(for request: Foundation.URLRequest, account: Swift.String) -> [Swift.String : Swift.String]?
  func availableAppVersions(forAppleItemIDs ids: [MarketplaceKit.AppleItemID]) -> [MarketplaceKit.AppVersion]?
  func requestFailed(with response: Foundation.HTTPURLResponse) -> Swift.Bool
  #if compiler(>=5.3) && $AsyncAwait
  func automaticUpdates(for installedAppVersions: [MarketplaceKit.AppVersion]) async throws -> [MarketplaceKit.AutomaticUpdate]
  #endif
}
@available(iOS 17.4, *)
extension MarketplaceKit.MarketplaceExtension {
  public var configuration: some MarketplaceKit.MarketplaceExtensionConfiguration {
    get
  }
}
@available(iOS 17.4, *)
public struct InstallRequirements : Swift.Sendable, Swift.Codable {
  public var minimumSystemVersion: Swift.String?
  public var requiredDeviceCapabilities: Swift.Set<Swift.String>?
  public var ageRatingRank: Swift.Int?
  public var expectedInstallSize: Swift.UInt64?
  public init()
  public func satisfiedByDevice() -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 17.4, *)
public let MarketplaceKitURIScheme: Swift.String
@available(iOS 17.4, *)
public enum MarketplaceKitError : Swift.Error, Swift.CustomStringConvertible, Swift.Sendable, Swift.Codable {
  case unknown
  case missingCapabilities([Swift.String])
  case unsupportedPlatform
  case minimumPlatformVersionNotSatisfied(Swift.String)
  case installationRestricted
  case installationOfMarketplaceDenied
  case ratingRestricted
  case insufficientStorageSpace(Foundation.Measurement<Foundation.UnitInformationStorage>)
  case noSupportedVariant
  case appNotInstalled
  case invalidManifest
  case networkError
  case invalidAlternativeDistributionPackageURL
  case invalidAlternativeDistributionPackageSignature
  case featureUnavailable
  case cancelled
  case mismatchedInstallType
  case oauthTokenError
  case invalidLicense
  case invalidURL
  case missingInstallVerificationToken
  public var description: Swift.String {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public typealias AppleItemID = Swift.UInt64
@_hasMissingDesignatedInitializers @available(iOS 17.4, *)
@_Concurrency.MainActor final public class AppLibrary {
  nonisolated public static let current: MarketplaceKit.AppLibrary
  @_Concurrency.MainActor final public var installedApps: Swift.Set<MarketplaceKit.AppLibrary.App> {
    get
    set
  }
  @_Concurrency.MainActor final public var installingApps: Swift.Set<MarketplaceKit.AppLibrary.App> {
    get
    set
  }
  @_Concurrency.MainActor final public var isLoading: Swift.Bool {
    get
    set
  }
  @available(iOS 17.4, *)
  @_Concurrency.MainActor final public func app(forAppleItemID appleItemID: MarketplaceKit.AppleItemID) -> MarketplaceKit.AppLibrary.App
  #if compiler(>=5.3) && $AsyncAwait
  nonisolated final public func requestAppInstallation(for url: Foundation.URL, account: Swift.String, installVerificationToken: Swift.String) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  nonisolated final public func requestAppInstallationFromBrowser(for url: Foundation.URL, referrer: Foundation.URL) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  nonisolated final public func requestAppUpdate(for url: Foundation.URL, account: Swift.String, installVerificationToken: Swift.String) async throws
  #endif
  #if compiler(>=5.3) && $EffectfulProp
  nonisolated final public var searchTerritory: Swift.String? {
    get async
  }
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  nonisolated final public func setSearchTerritory(_ territory: Swift.String?) async
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  nonisolated final public func requestLicenseRenewal(appleItemIDs: [Swift.UInt64]) async throws
  #endif
  @objc deinit
}
@available(iOS 17.4, *)
extension MarketplaceKit.AppLibrary : Observation.Observable {
}
public typealias AppleVersionID = Swift.UInt64
extension MarketplaceKit.AppLibrary {
  @_hasMissingDesignatedInitializers @available(iOS 17.4, *)
  @_Concurrency.MainActor final public class App : Swift.Identifiable, Swift.Hashable {
    nonisolated final public let id: MarketplaceKit.AppleItemID
    public struct Metadata : Swift.Sendable, Swift.Equatable {
      public let appleVersionID: MarketplaceKit.AppleVersionID
      public let version: Swift.String
      public let shortVersion: Swift.String
      public let account: Swift.String?
      public static func == (a: MarketplaceKit.AppLibrary.App.Metadata, b: MarketplaceKit.AppLibrary.App.Metadata) -> Swift.Bool
    }
    public struct Installation : Swift.Sendable {
      public var progress: Foundation.Progress {
        get
      }
    }
    @_Concurrency.MainActor final public var installedMetadata: MarketplaceKit.AppLibrary.App.Metadata? {
      get
    }
    @_Concurrency.MainActor final public var installation: MarketplaceKit.AppLibrary.App.Installation? {
      get
    }
    @_Concurrency.MainActor final public var isInstalled: Swift.Bool {
      get
    }
    @_Concurrency.MainActor final public var isInstalling: Swift.Bool {
      get
    }
    @_Concurrency.MainActor final public var isUpdating: Swift.Bool {
      get
    }
    nonisolated public static func == (lhs: MarketplaceKit.AppLibrary.App, rhs: MarketplaceKit.AppLibrary.App) -> Swift.Bool
    nonisolated final public func hash(into hasher: inout Swift.Hasher)
    public typealias ID = MarketplaceKit.AppleItemID
    @objc deinit
    nonisolated final public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 17.4, *)
extension MarketplaceKit.AppLibrary.App : Observation.Observable {
}
@available(iOS 17.4, *)
public enum AppDistributor {
  #if compiler(>=5.3) && $EffectfulProp
  public static var current: MarketplaceKit.AppDistributor {
    get async throws
  }
  #endif
  case appStore
  case testFlight
  case marketplace(Swift.String)
  case other
}
@available(iOS 17.4, *)
extension MarketplaceKit.AppLibrary : Swift.Sendable {}
@available(iOS 17.4, *)
extension MarketplaceKit.AppLibrary.App : Swift.Sendable {}

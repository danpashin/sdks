// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.11 clang-1500.1.0.2.2)
// swift-module-flags: -target arm64-apple-ios17.2 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -module-name FinanceKit
// swift-module-flags-ignorable: -enable-bare-slash-regex -user-module-version 143.7.12
import Accelerate
import Contacts
import CoreData
import CoreFoundation
import CoreGraphics
import CoreLocation
import CoreServices
import CoreSpotlight
import CryptoKit
import Darwin
import ExtensionFoundation
@_exported import FinanceKit
import Foundation
import ImageIO
import OSLog
import SQLite3
import Security
import Swift
import System
import UniformTypeIdentifiers
import UserNotifications
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import _System_Foundation
import os.log
import os
import os.signpost
import simd
@available(iOS 17, *)
@available(tvOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension FinanceKit.FinanceStore {
  public enum ContainsOrderResult : Swift.CaseIterable, Swift.Hashable, Swift.Sendable {
    case exists
    case notFound
    case newerExists
    case olderExists
    public static func == (a: FinanceKit.FinanceStore.ContainsOrderResult, b: FinanceKit.FinanceStore.ContainsOrderResult) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias AllCases = [FinanceKit.FinanceStore.ContainsOrderResult]
    public static var allCases: [FinanceKit.FinanceStore.ContainsOrderResult] {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 17, *)
@available(tvOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension FinanceKit.FinanceStore {
  #if compiler(>=5.3) && $AsyncAwait
  public func containsOrder(matching fqoid: FinanceKit.FullyQualifiedOrderIdentifier, updatedDate: Foundation.Date? = nil) async throws -> FinanceKit.FinanceStore.ContainsOrderResult
  #endif
}
@available(iOS 17, *)
@available(tvOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension FinanceKit.FinanceStore {
  public enum SaveOrderResult : Swift.CaseIterable, Swift.Hashable, Swift.Sendable {
    case added
    case cancelled
    case newerExisting
    public static func == (a: FinanceKit.FinanceStore.SaveOrderResult, b: FinanceKit.FinanceStore.SaveOrderResult) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias AllCases = [FinanceKit.FinanceStore.SaveOrderResult]
    public static var allCases: [FinanceKit.FinanceStore.SaveOrderResult] {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 17, *)
@available(tvOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension FinanceKit.FinanceStore {
  #if compiler(>=5.3) && $AsyncAwait
  public func saveOrder(signedArchive: Foundation.Data) async throws -> FinanceKit.FinanceStore.SaveOrderResult
  #endif
}
@available(iOS 17, *)
@available(tvOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension FinanceKit.FinanceStore {
  public enum DataType {
    case orders
    public static func == (a: FinanceKit.FinanceStore.DataType, b: FinanceKit.FinanceStore.DataType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 17, *)
@available(tvOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension FinanceKit.FinanceStore {
  public static func isDataAvailable(_ type: FinanceKit.FinanceStore.DataType) -> Swift.Bool
}
@available(iOS 17, *)
@available(tvOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public struct FullyQualifiedOrderIdentifier : Swift.Codable, Swift.Hashable, Swift.Sendable {
  public var orderTypeIdentifier: Swift.String
  public var orderIdentifier: Swift.String
  public init(orderTypeIdentifier: Swift.String, orderIdentifier: Swift.String)
  public static func == (a: FinanceKit.FullyQualifiedOrderIdentifier, b: FinanceKit.FullyQualifiedOrderIdentifier) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 17, *)
@available(tvOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension FinanceKit.FullyQualifiedOrderIdentifier : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 17, *)
@available(tvOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public class FinanceStore {
  public static let shared: FinanceKit.FinanceStore
  @objc deinit
}
@available(iOS 17, *)
@available(tvOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension FinanceKit.FinanceStore.DataType : Swift.Equatable {}
@available(iOS 17, *)
@available(tvOS, unavailable)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension FinanceKit.FinanceStore.DataType : Swift.Hashable {}
